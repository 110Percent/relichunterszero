<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

// Buttons
global.selectedButton = -1;
joyCanSwitch = true;
joyCanSwitchTime = room_speed*0.25;
joyCanSwitchTimeCurrent = 0;

oldMouseX = mouse_x;
oldMouseY = mouse_y;

//Console Button Setup
global.buttonGrid = 0; //The grid is actually created on the buttonSetup
buttonSetupDone = false;
buttonGridSize = 8;

allowInput = false;

alarm[0] = room_speed*0.5;//Allow interaction
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CleanUp

if ds_exists(global.buttonGrid,ds_type_grid) ds_grid_destroy(global.buttonGrid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow Input &amp; Gives Vertical Order to Buttons

allowInput = true;

var verticalList = ds_priority_create();
var horizontalList = ds_priority_create();

var targetButton;
var buttonCount = instance_number(class_menu_button);

for (i=0; i&lt;buttonCount; i++)
{
    targetButton = instance_find(class_menu_button,i);
    ds_priority_add(verticalList,targetButton,targetButton.y);
    ds_priority_add(horizontalList,targetButton,targetButton.x);
}

var selectionOrderVertical = 0;
var selectionOrderHorizontal = 0;

while (!ds_priority_empty(verticalList))
{
    targetButton = ds_priority_find_min(verticalList);
    if (targetButton.allowConsoleSelection)
    {
        targetButton.selectionOrderVertical = selectionOrderVertical;
        selectionOrderVertical++;
    }
    ds_priority_delete_min(verticalList);
    
}

ds_priority_destroy(verticalList);

while (!ds_priority_empty(horizontalList))
{
    targetButton = ds_priority_find_min(horizontalList);
    if (targetButton.allowConsoleSelection)
    {
        targetButton.selectionOrderHorizontal = selectionOrderHorizontal;
        selectionOrderHorizontal++;
    }
    ds_priority_delete_min(horizontalList);
    
}

ds_priority_destroy(horizontalList);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controller Grid Setup

if (!buttonSetupDone) &amp;&amp; (instance_exists(class_menu_button))
{
    var buttonCount = instance_number(class_menu_button);
    var currentY = 0;
    var currentX = 0;
    
    //Vertical Coordinates
    var priorityVertical = ds_priority_create();
    
    for (var i=0; i&lt;buttonCount; i++)
    {
        var buttonFound = instance_find(class_menu_button,i);
        ds_priority_add(priorityVertical, buttonFound.id, buttonFound.y);
    }
    
    if (!ds_priority_empty(priorityVertical))
    {
        var topmostButton = ds_priority_delete_min(priorityVertical);
        topmostButton.buttonGridY = 0;
    
        while (!ds_priority_empty(priorityVertical))
        {
            var nextButton = ds_priority_delete_min(priorityVertical);
            if (nextButton.allowConsoleSelection)
            {
                if (abs(nextButton.y - topmostButton.y) &gt; buttonGridSize) currentY++;
                nextButton.buttonGridY = currentY;
                topmostButton = nextButton;
            }
        }
    }
    ds_priority_destroy(priorityVertical);
    
    //Horizontal Coordinates
    var priorityHorizontal = ds_priority_create();
    
    for (var i=0; i&lt;buttonCount; i++)
    {
        var buttonFound = instance_find(class_menu_button,i);
        ds_priority_add(priorityHorizontal, buttonFound.id, buttonFound.x);
    }
    
    if (!ds_priority_empty(priorityHorizontal))
    {
        var leftmostButton = ds_priority_delete_min(priorityHorizontal);
        leftmostButton.buttonGridX = 0;
    
        
        
        while (!ds_priority_empty(priorityHorizontal))
        {
            var nextButton = ds_priority_delete_min(priorityHorizontal);
            if (nextButton.allowConsoleSelection)
            {
                if (abs(nextButton.x - leftmostButton.x) &gt; buttonGridSize) currentX++;
                nextButton.buttonGridX = currentX;
                leftmostButton = nextButton;
            }
        }
    }
    ds_priority_destroy(priorityHorizontal);
    
    //Create the actual grid
    global.buttonGrid = ds_grid_create(currentX+1, currentY+1);
    with (class_menu_button)
    {
        if (allowConsoleSelection)
        {
            ds_grid_set(global.buttonGrid, buttonGridX, buttonGridY, id);
            
            if ds_grid_value_exists(global.buttonGrid, 0, 0, ds_grid_width(global.buttonGrid)-1, ds_grid_height(global.buttonGrid)-1, id)
            {
                var actualGridX = ds_grid_value_x(global.buttonGrid, 0, 0, ds_grid_width(global.buttonGrid), ds_grid_height(global.buttonGrid), id);
                var actualGridY = ds_grid_value_y(global.buttonGrid, 0, 0, ds_grid_width(global.buttonGrid), ds_grid_height(global.buttonGrid), id);
            }
        }
    }
    buttonSetupDone = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Buttons vs Input Methods

if (allowInput)
{
    if (global.input == 'joystick') &amp;&amp; (buttonSetupDone) &amp;&amp; ds_exists(global.buttonGrid,ds_type_grid)
    {
        //If there's no button selected, get the topmost one
        if (global.selectedButton == -1) || (global.selectedButton == 0) || (!instance_exists(global.selectedButton))
        {
            global.selectedButton = ds_grid_get_topmost(global.buttonGrid);
        }    
        else {
            //Get direction input
            if (joy_simple_deadzone( joy_xpos(0), joy_ypos(0), 0.3)) || joy_check_pressed(0,15) || joy_check_pressed(0,16) || joy_check_pressed(0,17) || joy_check_pressed(0,18) 
            {
                if (joyCanSwitch)
                {
                    joyCanSwitch = false;
                    var joyDirection = -1;
                    if (joy_simple_deadzone( joy_xpos(0), joy_ypos(0), 0.3)) joyDirection = point_direction(x,y,(x+joy_xpos(0)),(y+joy_ypos(0)));

                    //Up
                    if (joyDirection &gt; 45 &amp;&amp; joyDirection &lt; 135) || (joy_check_pressed(0,15))
                    {
                        getId = ds_grid_get_above(global.buttonGrid, global.selectedButton.buttonGridX, global.selectedButton.buttonGridY);
                        if (getId) global.selectedButton = getId;
                    }
                    
                    //Down
                    if (joyDirection &gt; 215 &amp;&amp; joyDirection &lt; 315) || (joy_check_pressed(0,16))
                    {
                        getId = ds_grid_get_below(global.buttonGrid, global.selectedButton.buttonGridX, global.selectedButton.buttonGridY);
                        if (getId) global.selectedButton = getId;
                    }
                    
                    //Left
                    if (joyDirection &gt; 135 &amp;&amp; joyDirection &lt; 215) || (joy_check_pressed(0,17))
                    {
                        if (!global.selectedButton.isToggle)
                        {
                            getId = ds_grid_get_left(global.buttonGrid, global.selectedButton.buttonGridX, global.selectedButton.buttonGridY);
                            if (getId) global.selectedButton = getId;
                        }
                        else if (global.selectedButton.myVariable)
                        {
                            global.selectedButton.myVariable-=1;
                            global.selectedButton.arrowClicked = true;
                        }
                    }
                    
                    //Right
                    if ((joyDirection != -1) &amp;&amp; (joyDirection &lt; 45 || joyDirection &gt; 315)) || (joy_check_pressed(0,18))
                    {
                        if (!global.selectedButton.isToggle)
                        {
                            getId = ds_grid_get_right(global.buttonGrid, global.selectedButton.buttonGridX, global.selectedButton.buttonGridY);
                            if (getId) global.selectedButton = getId;
                        }
                        else if (global.selectedButton.myVariable &lt; global.selectedButton.myVariableMax)
                        {
                            global.selectedButton.myVariable+=1;
                            global.selectedButton.arrowClicked = true;
                        }
                    }    
                }
                else
                {
                    joyCanSwitchTimeCurrent++;
                    if (joyCanSwitchTimeCurrent &gt;= joyCanSwitchTime)
                    { 
                        joyCanSwitch = true;
                        joyCanSwitchTimeCurrent=0;
                    }
                }   
            }
            else { joyCanSwitch = true; joyCanSwitchTimeCurrent=0; }
        }
        
       
    }
    
    
    //Switch to K&amp;M
    if ( mouse_check_button(mb_any) || keyboard_check(vk_anykey) || (mouse_x != oldMouseX) || (mouse_y != oldMouseY) )
    {
        global.input = 'keyboard';
    }
        
    oldMouseX = mouse_x;
    oldMouseY = mouse_y;
        
    //Switch to Joystick
    if (gamepad_is_connected(0))
    {   
        if (joy_check_any(0)) || (joy_simple_deadzone( joy_xpos(0), joy_ypos(0), 0.3)) global.input = 'joystick';
    }
}
else global.selectedButton = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Cursor

if (global.input == 'keyboard')
{
    draw_sprite(spr_crosshair,0,mouse_x,mouse_y);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG: Draw grid feedback on button
/*

// Global button DEBUG:

if (keyboard_check(vk_space))
{
    if (instance_exists(class_menu_button))
    {
        draw_set_font(global.font_menuSmall);
        draw_set_color(c_purple);
        with (class_menu_button)
        {
            if (allowConsoleSelection) 
            {
                if ds_grid_value_exists(global.buttonGrid, 0, 0, ds_grid_width(global.buttonGrid), ds_grid_height(global.buttonGrid), id)
                {
                    var actualGridX = ds_grid_value_x(global.buttonGrid, 0, 0, ds_grid_width(global.buttonGrid), ds_grid_height(global.buttonGrid), id);
                    var actualGridY = ds_grid_value_y(global.buttonGrid, 0, 0, ds_grid_width(global.buttonGrid), ds_grid_height(global.buttonGrid), id);
                }
         
                draw_text(x,y,'X: '+string(actualGridX)+' Y: '+string(actualGridY));
            }
        }
    }
}
else
{
    // Internal Button Debug
    if (instance_exists(class_menu_button))
    {
        draw_set_font(global.font_menuSmall);
        draw_set_color(c_purple);
        with (class_menu_button)
        {
            if (allowConsoleSelection) draw_text(x,y,'X: '+string(buttonGridX)+' Y: '+string(buttonGridY));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
