<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Shit

myPlayerId = 1;
playerName = "NONAME";

setup_initial = false;
interactionKey = false;

myDynamicBar = instance_create(x,y,gui_dynamicBar);
myDynamicBar.owner = id;

energy_max = 100;
energy_max_regular = energy_max;
energy_max_relic = energy_max*2;
energy = energy_max;

hp_max = 100;
hp_max_regular = hp_max;
hp_max_relic = hp_max*2;
hp = hp_max;

hp_regen_time = room_speed*1;
hp_regen_time_current = 0;
hp_regen_amount = 2;

stamina_max = 100;
stamina = stamina_max;

base_accuracy = 1;

accPistol = 1;
accMachinegun = 1;
accShotgun = 1;
accSniper = 1;
accSmg = 1;
accRocket = 1;
accRifle = 1;
accKeytar = 1;
accFlame = 1;

stamina_regen = 0.32;
stamina_regen_regular = stamina_regen;
stamina_regen_relic = stamina_regen*2;

dodge_stamina = 50;
sprint_stamina = 0.3;
sprint_stamina_min = 10;

move_speed_max = 4.5;
move_speed_sprint = 5.5;
move_speed_aiming = 2;
move_accel = 1.5;
move_friction = 0.4;

dodge_speed = 35;
dodge_duration = room_speed*0.4;
dodge_time = 0;
dodgeFriction = 0.2;
dodge_doubletap_time = room_speed*0.2;
dodge_doubletap_time_current = dodge_doubletap_time;
dodge_doubletap_direction = 0;

grenade_speed = 7;

dashTimeWindow = room_speed*0.25;
dashTimeCurrent = 99;

pickupTimeWindow = room_speed*0.35;
pickupTimeCurrent = 0;
allowPickup = false;

moving = false;
sprinting = false;
sprintToggled = false;
dodging = false;
aiming = false;
move_direction = 0;
move_speed = 0;
look_direction = 1;

active_interaction = noone;

// Instantiate Guns
myGun = noone;

weapon1 = noone;
weapon2 = noone;

reloadBarObj = instance_create(x,y,gui_reload_bar);
reloadBarObj.owner = id;

// Animation
animation_priority = 0;
animation_index = 0;
animation_current = 'noone';
footStepTime = ((room_speed*0.2) * 1);
footStepTimeCurrent = 0;
animation_play('idle',0.2,an_loop,1,1);
image_speed = 0;

// Pickups
myPickupList = ds_priority_create();

// Power Ups
serendipity = false;
serendipity_duration = room_speed*10;
serendipity_duration_current = 0;

//Hit Taken
hit_taken = false;

//Shield
shield = true;

energy_regen_time = room_speed*5;
energy_regen_time_regular = energy_regen_time;
energy_regen_time_relic = round(energy_regen_time/2);

energy_regen_time_current = 0;
energy_regen_speed = 1;

shield_fading = false;
shield_alpha = 0;
shield_alpha_speed = 0;
shield_alpha_accel = 0.2;
shield_alpha_speed_max = 2;

//Biu's Shield
inputShield = false;

//Dash
myDash = instance_create(x,y,fx_player_dash);
myDash.owner = id;

//Melee
melee_damage = 100;
melee_push_power = 14;

melee = false;
melee_dash = false;
melee_image_speed = 0.2;
melee_hit_frame = 5;
melee_step_speed = 18;
melee_stamina_cost = 0;

melee_damage_gloves = 160;
melee_push_power_gloves = 15;
melee_step_speed_gloves = 25;

throw = false;

//Sprites
sprite_idle = spr_jimmy_idle;
sprite_walk = spr_jimmy_walk;
sprite_sprint = spr_jimmy_walk;
sprite_dash = spr_jimmy_walk;
sprite_hit = spr_jimmy_walk;
sprite_death = spr_jimmy_walk;
sprite_melee = spr_jimmy_walk;
sprite_dash_fx = spr_jimmy_walk;

reflection_object_setup(0,-1,image_index);
shadow_object_setup(0,-1,-1,global.default_shadow_yscale);

//Sound

audio_emitter = audio_emitter_create();
audio_falloff_set_model(audio_falloff_linear_distance);
audio_emitter_falloff(audio_emitter, global.falloffMainDist, global.falloffMainMax, global.falloffMainFactor);
audio_emitter_gain(audio_emitter,global.soundVolume);

play_sound_pickup_weapon = false;
if (room != room_start) audio_play(audio_emitter, false, 1, sfx_teleport);




//Joystick
joyLookDirection = 0;
joyLookTargetAngle = 0;
joyAimLocked = false;
targetEnemy = noone;

joyMoveDeadzoneMin = 0.3;
joyMoveDeadZoneMax = 0.65;
joyMoveSlowSpeed = 0.5;

joyAutoAimSpeedIn = 0.75;
joyAutoAimSpeedOut = 0.6;
joyAutoAimAdjustment = 0;

joyAutoAimSnapAngle = 5;

joyIsRightStickAiming = false;
joyAimStickVector = 0;

joyCrosshairDistance = 0;
joyCrosshairDistanceTarget = 0;
joyCrosshairDistanceSpeed = 30;
joyCrosshairDistanceMin = 40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CleanUp
audio_emitter_free(audio_emitter);
//ds_priority_destroy(myPickupList); This is crashing the game for some reason?!?!
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crosshair Position &amp; AutoAim
if (global.input == 'keyboard')
{
    global.crosshairX = mouse_x;
    global.crosshairY = mouse_y;
}

if (global.input == 'joystick') &amp;&amp; instance_exists(class_player) &amp;&amp; instance_exists(myGun)
{
    var autoAimAngle = 10;
    if (global.auto_aim == K_AUTOAIM_FULL) autoAimAngle = 360;

    var joyLookAngularVelocity, joyLookDeadzone, targetSwitchDeadzone, enemyDistance;
    
    joyLookDeadzone = 0.55;
    targetSwitchDeadzone = 0.75;
    
    if (aiming)
    {
        joyLookAngularVelocity = 5;
        
        if (global.sticky_aim == true) &amp;&amp; instance_exists(class_enemy)
        {
            if (collision_line(x, y, x+lengthdir_x(800,joyLookDirection), y+lengthdir_y(800,joyLookDirection), class_enemy, false, true))
            {
                joyLookAngularVelocity = 2;
            }
        }
        
        if (global.auto_aim != K_AUTOAIM_OFF)
        {
            targetEnemy = find_enemy_autoaim(myGun.x,myGun.y, joyLookTargetAngle, autoAimAngle, myGun.projectile_range );
            
            if (targetEnemy) &amp;&amp; instance_exists(targetEnemy)
            {
                joyAimLocked = true;
            }
        }
        
        if (joyAimLocked)
        {
            if (targetEnemy) &amp;&amp; instance_exists(targetEnemy)
            {
                joyLookDirection = autoaim_angle(myGun.x,myGun.y,targetEnemy);
                if (abs(angle_difference(joyLookDirection,joyLookTargetAngle) &gt; autoAimAngle)) joyAimLocked = false;
            }
            else joyAimLocked = false;
        }
    }
    else
    {
        joyLookAngularVelocity = 30;
        joyAimLocked = false;
        
        if (global.auto_aim == K_AUTOAIM_FULL) //if (global.auto_aim != K_AUTOAIM_OFF)
        {
            var candidate = find_enemy_autoaim(myGun.x,myGun.y, joyLookTargetAngle, autoAimAngle, myGun.projectile_range );
            if (targetEnemy != candidate)
            {
                global.crosshair_scale = 1.85;
                targetEnemy = candidate;
            }
                
            if (targetEnemy) &amp;&amp; instance_exists(targetEnemy)
            {
                var aimingX = get_bbox_centerX(targetEnemy);
                var aimingY = get_bbox_centerY(targetEnemy);
                    
                joyLookDirection = autoaim_angle(myGun.x,myGun.y,targetEnemy);  
                joyAimLocked = true;
            }
        }
    }
    
    //Crosshair Distance Resolve
    
    joyIsRightStickAiming = joy_simple_deadzone( joy_x2pos(0), joy_y2pos(0), joyLookDeadzone);
    
    if (joyIsRightStickAiming) joyLookTargetAngle = point_direction(x,y,(x+joy_x2pos(0)),(y+joy_y2pos(0)));
    else if (!aiming) &amp;&amp; (joy_simple_deadzone( joy_xpos(0), joy_ypos(0), joyLookDeadzone)) joyLookTargetAngle = point_direction(x,y,(x+joy_xpos(0)),(y+joy_ypos(0))); //Direction set by movement stick
        
    if (!joyAimLocked)
    {   
        joyLookDirection = angle_rotate(joyLookDirection, joyLookTargetAngle, joyLookAngularVelocity); 
    }
    
    var joyAimVector = point_distance(0, 0, joy_x2pos(0), joy_y2pos(0) );
    if (joyIsRightStickAiming) joyCrosshairDistanceTarget = 320 * joyAimVector;
    else joyCrosshairDistanceTarget = joyCrosshairDistanceMin;
    
    if (joyCrosshairDistance != joyCrosshairDistanceTarget)
    {
        if (joyCrosshairDistance &lt; joyCrosshairDistanceTarget) joyCrosshairDistance += min( joyCrosshairDistanceSpeed, abs(joyCrosshairDistanceTarget-joyCrosshairDistance) );
        else joyCrosshairDistance -= min( joyCrosshairDistanceSpeed, abs(joyCrosshairDistanceTarget-joyCrosshairDistance) );
    }
        
    //Final Crosshair Position
    global.crosshairX = x + lengthdir_x(joyCrosshairDistance, joyLookDirection);
    global.crosshairY = y + lengthdir_y(joyCrosshairDistance, joyLookDirection);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Relic Buffs

//Pineapple Pudding
if (global.relic_pineapple_pudding == 2) hp_max = hp_max_relic;
else hp_max = hp_max_regular;
if (room == room_start) hp = hp_max;

//Yottabyte Drive
if (global.relic_yottabyte_drive == 2) energy_max = energy_max_relic;
else energy_max = energy_max_regular;
if (room == room_start) energy = energy_max;

//Alcoholic Carrot
if (global.relic_alcoholic_carrot == 2) stamina_regen = stamina_regen_relic;
else stamina_regen = stamina_regen_regular;

//Infinity Battery
if (global.relic_infinity_battery == 2) energy_regen_time = energy_regen_time_relic;
else energy_regen_time = energy_regen_time_regular;

//Watchful Eye
// See controller_main;

//Midnight Beer
// See projectile_player and melee_arc

//Crystal Bacon
// See fx_corpse for the new "On-kill" effect
/* OLD CONSTANT REGEN:
if (global.relic_crystal_bacon == 2)
{
    if (hp &lt; hp_max)
    {
        hp_regen_time_current++;
        if hp_regen_time_current &gt;= hp_regen_time
        {
            hp += hp_regen_amount;
            hp_regen_time_current=0;
        }
    }
    else hp_regen_time_current=0;
}
*/

//Dev Potion
// See class_gun
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.pause</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement &amp; Stamina
speed = move_speed;
direction = move_direction;
dodge_direction = -1;

//Keyboard
if global.input == 'keyboard' &amp;&amp; (!dodging) &amp;&amp; (!melee_dash)
{   
    //Movement
    if input_key_left() &amp;&amp; !input_key_up() &amp;&amp; !input_key_down() { motion_add(180,move_accel); dodge_direction = 180; }
    if input_key_right() &amp;&amp; !input_key_up() &amp;&amp; !input_key_down() { motion_add(0,move_accel); dodge_direction = 0; }
    if input_key_up() &amp;&amp; !input_key_right() &amp;&amp; !input_key_left() { motion_add(90,move_accel); dodge_direction = 90; }
    if input_key_down() &amp;&amp; !input_key_right() &amp;&amp; !input_key_left() { motion_add(270,move_accel); dodge_direction = 270; }
    if input_key_left() &amp;&amp; input_key_up() { motion_add(135,move_accel); dodge_direction = 135; }
    if input_key_left() &amp;&amp; input_key_down() { motion_add(225,move_accel); dodge_direction = 225; }
    if input_key_right() &amp;&amp; input_key_up() { motion_add(45,move_accel); dodge_direction = 45; }
    if input_key_right() &amp;&amp; input_key_down() { motion_add(315,move_accel); dodge_direction = 315; }
    
    //Sprinting
    if (input_key_sprint_toggle()) sprintToggled = true;
    
    if (input_key_sprint() || input_key_sprint_toggle()) &amp;&amp; (!melee)
    {
        if (sprinting) &amp;&amp; (stamina &lt; sprint_stamina) sprinting = false; 
        else if (stamina &gt;= sprint_stamina_min) sprinting = true;
        if (sprinting) sprintOriginalDirection = direction;
    }
    else if (!sprintToggled) sprinting = false;
    
    if (sprinting) &amp;&amp; (sprintToggled)
    {
        if ( abs(angle_difference(direction,sprintOriginalDirection)) &gt; 100) || (speed &lt; 2) || (stamina &lt; sprint_stamina) || (melee)
            sprinting = false;
    }
    
    if (!sprinting) sprintToggled = false;
    
    //Dodge
    if ( input_key_sprint() )
    {
        dashTimeCurrent++;
    }
    
    double_tap_dodge = false;
    
    if (global.doubleTapDodge)
    {
        if input_key_left_pressed()
        {
            if (dodge_doubletap_direction == 180) &amp;&amp; (dodge_doubletap_time_current &lt; dodge_doubletap_time) double_tap_dodge = true;
            else { dodge_doubletap_direction = 180; dodge_doubletap_time_current = 0; } 
        }
        if input_key_right_pressed()
        {
            if (dodge_doubletap_direction == 0) &amp;&amp; (dodge_doubletap_time_current &lt; dodge_doubletap_time) double_tap_dodge = true;
            else { dodge_doubletap_direction = 0; dodge_doubletap_time_current = 0; } 
        }
        if input_key_up_pressed()
        {
            if (dodge_doubletap_direction == 90) &amp;&amp; (dodge_doubletap_time_current &lt; dodge_doubletap_time) double_tap_dodge = true;
            else { dodge_doubletap_direction = 90; dodge_doubletap_time_current = 0; } 
        }
        if input_key_down_pressed()
        {
            if (dodge_doubletap_direction == 270) &amp;&amp; (dodge_doubletap_time_current &lt; dodge_doubletap_time) double_tap_dodge = true;
            else { dodge_doubletap_direction = 270; dodge_doubletap_time_current = 0; } 
        }
        dodge_doubletap_time_current++;
    }
    
    if ( (input_key_sprint_released() &amp;&amp; (dashTimeCurrent &lt;= dashTimeWindow) ) || (double_tap_dodge) ) &amp;&amp; (!melee)
    {
        if (stamina &gt;= dodge_stamina)
        {
            stamina -= dodge_stamina;
            dodging = true;
            speed = dodge_speed;
            if (dodge_direction == -1)
            {
                dodge_direction = 180 + point_direction(x,y,global.crosshairX,global.crosshairY);
            }
            if (!double_tap_dodge) direction = dodge_direction;
            else direction = dodge_doubletap_direction;
            
            audio_play(audio_emitter,false,1,sfx_dash1,sfx_dash2,sfx_dash3);
        }
        else{
            //Low Stamina Feedback
            guiInfo = instance_create(x,y,gui_info);
            guiInfo.colorMain = K_BETU_RED;
            guiInfo.myString = loc_key("INFO_LOWSTAMINA");
            guiInfo.owner = id;
            audio_play(audio_emitter, false, 1, sfx_pickup_full);
        }
    }
    
    if ( input_key_sprint_released() ) dashTimeCurrent = 0;
    
    //Aiming
    if input_key_aim() &amp;&amp; (!sprinting) &amp;&amp; (!melee) aiming = true;
    else aiming = false;
}

//////////////////////////////////////////////////////////////
//Joystick
if global.input == 'joystick' &amp;&amp; (!dodging) &amp;&amp; (!melee_dash)
{
    //Movement
    if (joy_simple_deadzone( joy_xpos(0), joy_ypos(0), joyMoveDeadzoneMin))
    {
        var joy_direction = point_direction(x,y,(x+joy_xpos(0)),(y+joy_ypos(0)));
        motion_add(joy_direction, move_accel);
        dodge_direction = joy_direction;
    }
    
    //Sprinting
    if (joy_check(0,9) || joy_check(0,1)) &amp;&amp; (!melee)
    {
        if (sprinting) &amp;&amp; (stamina &lt; sprint_stamina) sprinting = false; 
        else if (stamina &gt;= sprint_stamina_min) sprinting = true;
        if (sprinting) sprintOriginalDirection = direction;
    }
    else if (!global.sprint_toggle) sprinting = false;
    
    if (sprinting) &amp;&amp; (global.sprint_toggle)
    {
        if ( abs(angle_difference(direction,sprintOriginalDirection)) &gt; 100) || (speed &lt; 2) || (stamina &lt; sprint_stamina) || (melee)
            sprinting = false;
    }
    
    //Dodging
    if joy_check(0,1)
    {
        dashTimeCurrent++;
    }
    
    if joy_check_released(0,1)
    {
        if (dashTimeCurrent &lt;= dashTimeWindow) &amp;&amp; (!melee)
        {
            if (stamina &gt;= dodge_stamina)
            {
                sprinting = false;
                stamina -= dodge_stamina;
                dodging = true;
                speed = dodge_speed;
                
                if (dodge_direction == -1)
                {
                    dodge_direction = 180 + point_direction(x,y,global.crosshairX,global.crosshairY);
                }
                
                direction = dodge_direction;
                audio_play(audio_emitter,false,1,sfx_dash1,sfx_dash2,sfx_dash3);
            }
            else{
                //Low Stamina Feedback
                guiInfo = instance_create(x,y,gui_info);
                guiInfo.colorMain = K_BETU_RED;
                guiInfo.myString = loc_key("INFO_LOWSTAMINA");
                guiInfo.owner = id;
                audio_play(audio_emitter, false, 1, sfx_pickup_full);
            }
        }
        dashTimeCurrent = 0; 
    }
    
    //Aiming
    if (joy_zpos(0) &gt; 0.7) &amp;&amp; (!melee)
    {  
        sprinting = false;
        aiming = true;
    }
    else aiming = false;
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

//Look Direction
if (!melee_dash)
{
    var direction_check = (global.crosshairX - x);
    if (direction_check &gt; 0) look_direction = 1;
    else look_direction = 0;
}


//Melee Step
if (melee) &amp;&amp; (animation_current = 'melee') &amp;&amp;(animation_index = melee_hit_frame)
{
    speed = melee_step_speed;
    if (myGun == obj_gloves) speed = melee_step_speed_gloves;
    direction = point_direction(x,y,global.crosshairX,global.crosshairY);
    melee_dash = true;
    
    if (direction &lt;= 90) || (direction &gt; 270) look_direction = 1;
    else look_direction = 0; 
}

//Friction
if (!dodging) motion_add(direction-180,min(speed,move_friction));
else motion_add(direction-180,min(speed,dodgeFriction));

//Resolve Movement
var totalSpeedVector = 1;
if (global.input == 'joystick')
{
    var currentThumbstick = joy_radial_vector( joy_xpos(0), joy_ypos(0));
    {
        if (currentThumbstick &gt; joyMoveDeadzoneMin) &amp;&amp; (currentThumbstick &lt; joyMoveDeadZoneMax) totalSpeedVector = joyMoveSlowSpeed;
    }
}

var maxSpeedAiming = move_speed_aiming*totalSpeedVector;
var maxSpeed = move_speed_max*totalSpeedVector;
var maxSpeedSprint = move_speed_sprint*totalSpeedVector;

if speed &gt; maxSpeedAiming &amp;&amp; (aiming) speed -=min(move_accel,speed-maxSpeedAiming);
if speed &gt; maxSpeed &amp;&amp; (!sprinting) speed -= min(move_accel,speed-maxSpeed);
if speed &gt; maxSpeedSprint &amp;&amp; (sprinting) speed -= min(move_accel,speed-maxSpeedSprint);

if (melee_dash) &amp;&amp; (speed == 0) melee_dash = false;

move_speed = speed;
move_direction = direction;
speed = 0;
direction = 0;

if (move_speed)
{
    move_step_ext(x + lengthdir_x(move_speed, move_direction),y + lengthdir_y(move_speed, move_direction),0,class_solid,0,0,0,0,0,0); 
}
else sprinting = false;

// Reset Dodge
if (dodging)
{
    dodge_time++
    if dodge_time &gt;= dodge_duration
    {
        dodge_time = 0;
        dodging = false;
    }
}

// Stamina Management
if (sprinting) stamina -= sprint_stamina;
if stamina &lt; 0 stamina = 0;

if (!sprinting) &amp;&amp; (!dodging) &amp;&amp; (!melee) &amp;&amp; (!throw) &amp;&amp; !((myGun == obj_buckler)&amp;&amp;(inputShield)) stamina += stamina_regen;

if stamina &gt; stamina_max stamina = stamina_max;

// Stop Aiming When Reloading
global.check_weapon_reloading = false;
with(class_gun) 
{
    if (reloading) global.check_weapon_reloading = true;
}
if (global.check_weapon_reloading) aiming = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation


// Look Direction
if !sprinting
{
    if look_direction == 0 image_xscale = -1;
    if look_direction == 1 image_xscale = 1;
}
else
{
    if (move_direction &gt; 90 &amp;&amp; move_direction &lt;= 270) image_xscale = -1;
    else image_xscale = 1;
}

//Hit Taken
if (hit_taken)
{
    energy_regen_time_current = 0;

    if (shield)
    {
        shield_effect = instance_create(x,y,fx_shield);
        shield_effect.owner = id;
        hit_taken = false;
    }
    else
    {
        animation_play('hit',0.2,an_clamp,10,3);
        hit_taken = false;
        audio_play(audio_emitter,false,1,sfx_impact_flesh1,sfx_impact_flesh2,sfx_impact_flesh3,sfx_impact_flesh4);
    }
}

//Melee and Grenade Throw
if ((melee) || (throw)) animation_play('melee',0.25,an_clamp_forever,99,7+2);


//Move &amp; Idle
if (move_speed)
{
    if (sprinting) 
    {
        if (animation_current != 'sprint')
        {
            mySprintFx = instance_create(x,y,fx_sprint); 
            mySprintFx.image_xscale = image_xscale;
            audio_play_exclusive(audio_emitter,false,1,sfx_sprint);
        }
        animation_play('sprint',0.2,an_loop,1,6);
    }
    else if (dodging) animation_play('dash',0.2,an_loop,1,6);
    else if (aiming) animation_play('walk',0.2,an_loop,1,6);
    else animation_play('walk',0.2,an_loop,1,6);
}
else animation_play('idle',0.2,an_loop,1,12);

//Footsteps
var playFootstepSound = false;

if (animation_current == 'walk') || (animation_current == 'sprint')
{
    footStepTimeCurrent++;
    if (footStepTimeCurrent &gt;= footStepTime)
    {
        playFootstepSound = true;
        footStepTimeCurrent = 0;
    }
}
else footStepTimeCurrent = 0;

if (playFootstepSound) audio_play(audio_emitter,false,1,sfx_walk1,sfx_walk2,sfx_walk3,sfx_walk4,sfx_walk5);

// Resolve
depth = -y;
animation_update_player();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Melee Attack + Biu's Shield

var input_melee = false;
var input_gloves = false;

if (global.input == 'keyboard')
{
    if input_key_melee_pressed()
    {
        input_melee = true;
    }
    
    if input_key_fire_pressed()
    {
        input_gloves = true; // Pinkyy's gloves
    }
    
    if input_key_fire()
    {
        inputShield = true; // Biu's Shield
    }
    else inputShield = false;
}

if (global.input == 'joystick')
{
    if joy_check_pressed(0,2)
    {
        input_melee = true;
    }
    
    if (joy_rpos(0) &gt; 0.7)
    {
        input_gloves = true;
        inputShield = true;
    }
    else inputShield = false;
}

if (!melee) &amp;&amp; (!throw)
{
    if (input_melee) || ( myGun == obj_gloves &amp;&amp; input_gloves )
    {
        melee = true;   
        if (myGun == obj_gloves)
        {
            audio_play(audio_emitter,false,1,sfx_gloves1,sfx_gloves2,sfx_gloves3,sfx_gloves4,sfx_gloves5,sfx_gloves6,sfx_gloves7);
        }
        else audio_play(audio_emitter,false,1,sfx_melee);
    }
}

if (melee) &amp;&amp; (animation_current == 'melee')
{
    if (animation_index = melee_hit_frame)
    {
        meleeArc = instance_create(x,y,fx_melee_arc);
        meleeArc.owner = id;
        meleeArc.damage = melee_damage;
        
        meleeArc.push_power = melee_push_power;
        stamina -= melee_stamina_cost;
        if stamina &lt; 0 stamina = 0;
        
        if (myGun == obj_gloves) 
        {
            meleeArc.damage = melee_damage_gloves;
            meleeArc.push_power = melee_push_power_gloves;
            meleeArc.sprite_index = spr_melee_gloves;
            meleeArc.max_hits = 5;  
        }  
    }

    if (animation_index &gt;= (animation_frames-1))
    {
        melee = false;
        animation_priority = 0;
    }
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grenade Throw

var grenade_input = false;

if (global.input == 'keyboard')
{
    if input_key_grenade_pressed()
    {
        grenade_input = true;
    }
}
    
if (global.input == 'joystick')
{
    if (joy_check_pressed(0,5))
    {
        grenade_input = true;
    }
}


if ( (grenade_input) &amp;&amp; (!melee) &amp;&amp; (!throw) )
{
    if (global.character[myPlayerId] != char_pinky)
    {
        if (global.grenades[myPlayerId])
        {
            throw = true;
            audio_play(audio_emitter,false,1,sfx_melee);
        }
        else{
            //Out of greandes feedback
            guiInfo = instance_create(x,y,gui_info);
            guiInfo.colorMain = K_BETU_RED;
            guiInfo.myString = loc_key("INFO_OUTOFGRENADES");
            guiInfo.owner = id;
            audio_play(audio_emitter, false, 1, sfx_pickup_full);
        }
    }
    else{
        //Pinky pinkyy grenade throw fail feedback
        guiInfo = instance_create(x,y,gui_info);
        guiInfo.colorMain = K_BETU_RED;
        guiInfo.myString = loc_key("INFO_CANTUSEGRENADES");
        guiInfo.owner = id;
        audio_play(audio_emitter, false, 1, sfx_pickup_full);
    }
}


if (throw) &amp;&amp; (animation_current == 'melee')
{
    if (animation_index = melee_hit_frame)
    {
        global.grenades[myPlayerId]--;
    
        myGrenade = instance_create(x,y,obj_grenadeNew);
        myGrenade.speed = grenade_speed;
        myGrenade.direction = point_direction(x,y,global.crosshairX,global.crosshairY);
    }

    if (animation_index &gt;= (animation_frames-1))
    {
        throw = false;
        animation_priority = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapon Switch

var switch_input = false;

if (weapon2 != noone)
{
    if (global.input == 'keyboard')
    {
        if ( input_key_switch_pressed() ) || ( global.allowMouseWheel &amp;&amp; (mouse_wheel_up() || mouse_wheel_down()) )
        {
            switch_input = true;
        }
    }
    
    if (global.input == 'joystick')
    {
        if (joy_check_pressed(0,4))
        {
            switch_input = true;
        }
    }
}


if (switch_input)
{
    //Stop reloading sound
    if (audio_is_playing(sfx_reload_loop1)) audio_stop_sound(sfx_reload_loop1);
    if (audio_is_playing(sfx_reload_loop2)) audio_stop_sound(sfx_reload_loop2);
    if (audio_is_playing(sfx_reload_loop3)) audio_stop_sound(sfx_reload_loop3);
    
    //Switch
    if myGun == weapon1 
    {
        draw_gun(weapon2);
        audio_play(audio_emitter,false,1,sfx_weapon_switch);
        exit;
    }
    if myGun == weapon2
    {
        draw_gun(weapon1);
        audio_play(audio_emitter,false,1,sfx_weapon_switch);
        exit;
    }
}

if (instance_exists(weapon2)) &amp;&amp; (!instance_exists(weapon1))
{
    weapon1 = weapon2;
    weapon2 = noone;
    draw_gun(weapon1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health, Shield, Death

//Health
if (hp &gt;= hp_max) hp = hp_max;

if (hp &lt;= 0) 
{
    corpse = instance_create(x,y,fx_corpse_player);
    if (global.character[myPlayerId] == char_jimmy) corpse.sprite_index = spr_jimmy_death;
    if (global.character[myPlayerId] == char_pinky) corpse.sprite_index = spr_pinky_death;
    if (global.character[myPlayerId] == char_raff) corpse.sprite_index = spr_raff_death;
    if (global.character[myPlayerId] == char_biu) corpse.sprite_index = spr_biu_death;
    if (global.character[myPlayerId] == char_punny) corpse.sprite_index = spr_punny_death;
    if (global.character[myPlayerId] == char_ass) corpse.sprite_index = spr_ass_death;
    instance_destroy();
}
else hp = round(hp);

//Shield
if energy &lt; energy_max
{
    energy_regen_time_current++;
    if energy_regen_time_current &gt;= energy_regen_time
    {
        if (!energy) energy = 1;
        shield = true;
        energy += energy_regen_speed;
        if (energy &gt; energy_max) energy = energy_max;
    }
    if energy_regen_time_current = energy_regen_time
    {
        myRecharge = instance_create(x,y,fx_shield_up);  
        audio_play(audio_emitter,false,1,sfx_shield_regen_start); 
        myRecharge.owner = id;
    }
    
    if (energy &lt; 0) energy = 0;
}

if (!energy) &amp;&amp; (shield == true) &amp;&amp; (energy_max)
{
    myShieldEffect = instance_create(x,y,fx_shield_explosion);
    myShieldEffect.owner = id;
    mySparks = instance_create(x,y,fx_shield_down);
    mySparks.owner = id;
    shield = false;
}

if (!energy_max) shield = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interaction and Reload

if (!instance_exists(active_interaction))
{
    active_interaction = noone;
}

interactionKey = false;
reloadKey = false;

if (global.input == 'keyboard')
{
    if ( input_key_use_pressed() ) interactionKey = true;
    if ( input_key_reload_pressed() ) reloadKey = true;
}

if (global.input == 'joystick')
{   
    if joy_check_released(0,3) if (pickupTimeCurrent &lt; pickupTimeWindow) reloadKey = true; 
    
    if joy_check(0,3) 
    {
        if (allowPickup) pickupTimeCurrent++;
    }
    else {pickupTimeCurrent = 0; allowPickup = true;}
    
    if (pickupTimeCurrent &gt;= pickupTimeWindow) &amp;&amp; (allowPickup)
    {
        interactionKey = true;
        allowPickup = false;
    }
}

///Check for nearby interactive objects, activate if key is pressed
if (instance_exists(class_interactive_master))
{
    ds_priority_clear(myPickupList);
    var countPickups = instance_number(class_interactive_master);
    for (var i=0; i&lt;countPickups; i++)
    {
        var pickupCurrent = instance_find(class_interactive_master,i);
        if (instance_exists(pickupCurrent))
        {
            var pickupDist = point_distance(x,y,pickupCurrent.x,pickupCurrent.y);
            if (pickupDist &lt;= pickupCurrent.range) &amp;&amp; (pickupCurrent.isInteractiveObjectActive) ds_priority_add(myPickupList, pickupCurrent, pickupDist);
        }
    }
    
    var myPickupInRange = noone;
    if (!ds_priority_empty(myPickupList)) myPickupInRange = ds_priority_find_min(myPickupList);
    
    if (instance_exists(myPickupInRange))
    {
        myPickupInRange.activationClient = id;
        if (interactionKey) myPickupInRange.wantToActivate = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio
audio_emitter_position(audio_emitter, x, y, 0);

if (play_sound_pickup_weapon)
{
    play_sound_pickup_weapon = false;
    audio_play(audio_emitter,false,1,sfx_pickup_weapon);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CleanUp
audio_emitter_free(audio_emitter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>36,36</point>
    <point>36,36</point>
  </PhysicsShapePoints>
</object>
