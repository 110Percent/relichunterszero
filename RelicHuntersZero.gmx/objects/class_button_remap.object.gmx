<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>class_menu_button</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button Config

event_inherited();
isAvailable = true;

myMap = 0;
waitForKey = false;

labelString = '';

textOffsetX = -1*(point_distance(x,y,bbox_left,y)) + 10;
textOffsetY = 0;

myFont = font_menu10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WaitForMap

if (waitForKey) //It's horrible but it's 2 am, do not judge me
{
    if (keyboard_check_pressed(vk_escape))
    {
        waitForKey = false;
        labelString = '';
        myMap = -99;
    }
    else if (keyboard_lastkey != -1) &amp;&amp; (keyboard_check_pressed(vk_anykey))
    {
        myMap = keyboard_lastkey;
    
        if (myMap == vk_lshift) myMap = vk_shift;
        if (myMap == vk_lcontrol) myMap = vk_control;
        if (myMap == vk_lalt) myMap = vk_alt;
        if (myMap == vk_rshift) myMap = vk_shift;
        if (myMap == vk_rcontrol) myMap = vk_control;
        if (myMap == vk_ralt) myMap = vk_alt;
        
        if (myMap == vk_left) labelString = 'LEFT ARROW';
        else if (myMap == vk_right) labelString = 'RIGHT ARROW';
        else if (myMap == vk_up) labelString =  'UP ARROW';
        else if (myMap == vk_down) labelString = 'DOWN ARROW'; 
        else if (myMap == vk_enter) labelString = 'ENTER';
        else if (myMap == vk_shift) labelString = 'SHIFT';
        else if (myMap == vk_control) labelString = 'CTRL';
        else if (myMap == vk_alt) labelString = 'ALT';
        else if (myMap == vk_space) labelString = 'SPACEBAR';
        else if (myMap == vk_backspace) labelString = 'BACKSPACE';
        else if (myMap == vk_tab) labelString = 'TAB';
        else if (myMap == vk_home) labelString = 'HOME';
        else if (myMap == vk_end) labelString = 'END';
        else if (myMap == vk_delete) labelString = 'DELETE';
        else if (myMap == vk_insert) labelString = 'INSERT';
        else if (myMap == vk_pageup) labelString = 'PAGE UP';
        else if (myMap == vk_pagedown) labelString = 'PAGE DOWN';
        else labelString = keyboard_lastchar;
            
        waitForKey = false;
    }
    else if (mouse_lastbutton != -1) &amp;&amp; (mouse_check_button_pressed(mb_any))
    {
        myMap = mouse_lastbutton
        if (myMap == mb_left) labelString = 'LEFT MOUSE';
        if (myMap == mb_right) labelString = 'RIGHT MOUSE';
        if (myMap == mb_middle) labelString = 'MIDDLE MOUSE';
            
        waitForKey = false;
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button Action
event_inherited();

if (executeAction)
{
    if (!waitForKey)
    {
        waitForKey = true;
        
        labelString = 'PRESS ANY KEY';
    }
    
    executeAction = false;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Event Override

if (isSelected) image_index = 0;
else image_index = 1;

draw_self();

draw_set_font(myFont);
draw_set_halign(fa_left);
draw_set_valign(fa_center);

if (!isSelected) draw_set_colour(c_white);
else draw_set_colour(make_colour_rgb(239,4,68));

if (labelString != '') draw_text(x+textOffsetX,y+textOffsetY,labelString);

if (isSelected) draw_sprite_ext(spr_menu_star,0,bbox_right,y,starScale,starScale,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
