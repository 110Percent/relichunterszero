<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1569325055</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Configuration

//Initialization
randomize();
joy_init();

global.gameOver = false;

global.steamApi = false;

if (steam_initialised())
{
    if (steam_stats_ready()) &amp;&amp; (steam_is_overlay_enabled())
    {
       global.steamApi = true;
    }
    else show_debug_message('ERROR: Steam Stats Not Accessible At This Time');
}
else show_debug_message('ERROR: Steam not initialized');



//Camera and Crosshair
global.crosshairX = 0;
global.crosshairY = 0;

main_camera = instance_create(x,y,controller_camera);
main_effects = instance_create(x,y,controller_effects);

global.default_shadow_yscale = 0.3;
global.music = true;

level_end = false;
global.level_complete = false;
global.pause = 0;

global.crosshair_scale = 1;
view_xview[0] = x;
view_yview[0] = y;

//Combat Options
global.precisionAngle = 50;
global.precisionDistance = 35;

//Level Build
level_built = false;

//Pathfinding
path_refresh = room_speed*1; // Updates the grid once per second
alarm[1] = path_refresh;
global.astar_grid = mp_grid_create(0,0,round(room_width/64),round(room_height/64),64,64);
mp_grid_add_instances(global.astar_grid,class_solid,false);

//Debug Pathfinding
global.drawGridDebug = false;

//GUI
guiSurface = surface_create(1920,1080);
global.total_value = 0;
score_time = room_speed*1.2;
score_time_current = 0;
score_value = 10;
score_string = 'KILL';

guiShieldAlertDraw = false;
guiShieldAlertTime = room_speed*0.5;
guiShieldAlertTimeCurrent = 0;

guiReloadAlertDraw = false;
guiReloadAlertTime = room_speed*0.5;
guiReloadAlertTimeCurrent = 0;

//Dynamic GUI
global.dynamicBounty = instance_create(0,0,gui_dynamic_bounty);
global.dynamicRelic1 = instance_create(0,0,gui_dynamic_relic1);
global.dynamicRelic2 = instance_create(0,0,gui_dynamic_relic2);
global.dynamicRelic3 = instance_create(0,0,gui_dynamic_relic3);
global.dynamicAmmo1 = instance_create(0,0,gui_dynamic_ammo1);

delayedAmmoLightBar = 1;
delayedAmmoMediumBar = 2;
delayedAmmoHeavyBar = 3;
delayedCharHealthBar1 = 4;
delayedCharShieldBar1 = 5;
delayedP1AmmoBar = 6;
draw_healthbar_delayed_init(delayedAmmoLightBar);
draw_healthbar_delayed_init(delayedAmmoMediumBar);
draw_healthbar_delayed_init(delayedAmmoHeavyBar);
draw_healthbar_delayed_init(delayedCharHealthBar1);
draw_healthbar_delayed_init(delayedCharShieldBar1);
draw_healthbar_delayed_init(delayedP1AmmoBar);

//BossFight GUI
bossBar = 666;
draw_healthbar_delayed_init(bossBar);
isBossSetup = false;
isGen1Setup = false;
isGen2Setup = false;
isGen3Setup = false;
fakeBarFill = 0;

//Score

global.coins_turtle1 = 1;
global.coins_turtle2 = 2;
global.coins_turtle3 = 3;
global.coins_duck1 = 3;
global.coins_duck2 = 4;
global.coins_duck3 = 5;

global.score_kill = 10;
global.score_headshot = 5;

global.score_doublekill = 5;
global.score_triplekill = 5;
global.score_multikill = 10;

//Prices
global.price_checkpoint1 = 2000;
global.price_checkpoint2 = 6000;
global.price_checkpoint3 = 12000;

global.price_pistol_assault = 650;
global.price_pistol_heavy = 3000;
global.price_pistol_plasma = 4200;
global.price_shotgun = 1200;
global.price_submachinegun = 2000;
global.price_highmag = 4000;
global.price_machinegun = 5000;
global.price_assault_rifle = 6000;
global.price_sniper_rifle = 7000;
global.price_shotgun_heavy = 9000;
global.price_rocketlauncher = 10000;

global.price_light1 = 300;
global.price_light2 = 300;
global.price_medium1 = 500;
global.price_medium2 = 850;
global.price_heavy1 = 500;
global.price_heavy2 = 750;
global.price_heavy3 = 1500;
global.price_heavy4 = 2000;
global.price_grenades1 = 1000;
global.price_grenades2 = 1500;
global.price_grenades3 = 3000;

global.price_pineapple1 = 500;
global.price_pineapple2 = 500;
global.price_pineapple3 = 500;
global.price_alcoholic1 = 500;
global.price_alcoholic2 = 500;
global.price_alcoholic3 = 500;
global.price_crystal1 = 2000;
global.price_crystal2 = 3000;
global.price_crystal3 = 5000;
global.price_infinity1 = 3000;
global.price_infinity2 = 3000;
global.price_infinity3 = 3000;
global.price_midnight1 = 2000;
global.price_midnight2 = 2000;
global.price_midnight3 = 2000;
global.price_watchful1 = 1200;
global.price_watchful2 = 1200;
global.price_watchful3 = 1200;
global.price_dev1 = 3000;
global.price_dev2 = 5000;
global.price_dev3 = 7000;
global.price_yottabyte1 = 750;
global.price_yottabyte2 = 750;
global.price_yottabyte3 = 750;

//Ammo

global.ammo_light_max = 250;
global.ammo_medium_max = 150;
global.ammo_heavy_max = 250;
global.grenades_max = 5;

ammo_light_max_regular = global.ammo_light_max;
ammo_medium_max_regular = global.ammo_medium_max;
ammo_heavy_max_regular = global.ammo_heavy_max;
grenades_max_regular = global.grenades_max;

ammo_light_max_relic = global.ammo_light_max;
ammo_medium_max_relic = global.ammo_medium_max;
ammo_heavy_max_relic = global.ammo_heavy_max;
grenades_max_relic = global.grenades_max;
grenades_max_biu = 10;

draw_ammo1 = 0;
draw_ammo2 = 0;

//Relics
global.midnightDamageMultiplier = 1.5;
global.crystalBaconRegen = 8;
global.devPotionRegenTime = room_speed*0.75;

//Audio
global.falloffMainDist = 1280;
global.falloffMainMax = 2000;
global.falloffMainFactor = 1;

global.falloffMediumDist = 600;
global.falloffMediumMax = 1500;
global.falloffMediumFactor = 1;

global.falloffMinorDist = 280;
global.falloffMinorMax = 1000;
global.falloffMinorFactor = 1;

//Pause Menu
game_pause_init();

//Center Mouse Position At Beggining
display_mouse_set(window_get_width() / 2, window_get_height() / 2);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Soundtrack &amp; Memory Cleaner

global.audio_cleaner = ds_list_create();

alarm[3] = room_speed*3;

if (global.music)
{
    if (room == room_start) //|| (room == room_tutorial)
    {
        audio_stop_all();
        audio_play_sound(bgm_main,99,true);
    }
    
    if room == room_shop
    {
        audio_stop_all();
        audio_play_sound(bgm_shop,99,true);
    }
    
    if room == level1_1
    {
        audio_stop_all();
        if !audio_is_playing(bgm_stage1) audio_play_sound(bgm_stage1,99,true);
        audio_play_sound(sfx_amb_stage1,99,true);
    }
    
    if room == level2_1
    {
        audio_stop_all();
        if !audio_is_playing(bgm_stage3) audio_play_sound(bgm_stage3,99,true);
        audio_play_sound(sfx_amb_stage2,99,true);
    }
    
    if room == level3_1
    {
        audio_stop_all();
        if !audio_is_playing(bgm_stage2) audio_play_sound(bgm_stage2,99,true);
        audio_play_sound(sfx_amb_stage3,99,true);
    }
    
    if room == level4_1
    {
        audio_stop_all();
        if !audio_is_playing(bgm_stage4) audio_play_sound(bgm_stage4,99,true);
        audio_play_sound(sfx_amb_stage4,99,true);
    }
    
    if room == room_boss
    {
        audio_stop_all();
        if !audio_is_playing(bgm_boss) audio_play_sound(bgm_boss,99,true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Game, Achievements &amp; Options Synchronization 

save_sync_read();

if (room == room_start) || (room == room_tutorial)
{
    global.character = char_jimmy;
    global.weapon1 = noone;
    global.weapon2 = noone;
    global.hp = 999999;
    
    global.stage_current = 1;
    
    global.ammo_light = 80;
    global.ammo_medium = 0;
    global.ammo_heavy = 0;
    global.grenades = 2;
}

if (room == room_start) global.stage_current = 0;
if (room == level1_3) global.stage_current = 1;
if (room == level2_3) global.stage_current = 2;
if (room == level3_3) global.stage_current = 3;
if (room == level4_3) global.stage_current = 4;


//Achievements
if (room == room_start) global.hasPickedWeapon = false;
show_debug_message('Test if weapon was picked up before: '+string(global.hasPickedWeapon));

if (room == room_start) global.hasUsedCheckpoint = false;
show_debug_message('Test if Checkpoint was used before: '+string(global.hasUsedCheckpoint));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Relic Selection

if (room == room_start)
{
    global.relic_slot[1] = '';
    global.relic_slot[2] = '';
    global.relic_slot[3] = '';
    
    global.relic_alcoholic_carrot = 0;
    global.relic_yottabyte_drive = 0;
    global.relic_pineapple_pudding = 0;
    global.relic_infinity_battery = 0;
    global.relic_crystal_bacon = 0;
    global.relic_midnight_beer = 0;
    global.relic_watchful_eye = 0;
    global.relic_dev_potion = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle Systems

global.particle_list = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cuscenes vs HUD

global.cutscene = true;

cutscene_bars_positionStart = 0.15;
cutscene_bars_position = cutscene_bars_positionStart;
cutscene_bars_exit_speed = 0.0025;
main_hud_alpha = 0;

//Stage GUI
alarm[4] = room_speed*0.75;

//Black Bars Duration
if (room == room_start) 
{
    alarm[2] = room_speed*4;
    //instance_create(x,y,gui_logo);
}
else  alarm[2] = room_speed*1.7;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reload Circle Bar Init
reloadBarRadius = 18;
reloadBarThickness = 8;
reloadBarSurfaceSize = 40;
reloadBarSurface = surface_create(reloadBarSurfaceSize,reloadBarSurfaceSize);
reloadBarSurface2 = surface_create(reloadBarSurfaceSize,reloadBarSurfaceSize);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///"Unlock-All" Achievements

//Everything //TODO: CHARACTER UNLOCKS HERE

if (room==room_start)
{
    var allUnlocks = true;
    
    if (global.unlockPinky) &amp;&amp; 
    (global.unlockRaff) &amp;&amp; 
    (global.unlockBiu) &amp;&amp; 
    (global.unlockPunny) &amp;&amp; 
    (global.unlockAss)
        {
            achievement_give("ACHIEVEMENT_UNLOCKALLHUNTERS");
        }
        else allUnlocks = false;
    
    if (global.relic_alcoholic_carrot &amp;&amp;
    global.relic_yottabyte_drive &amp;&amp;
    global.relic_pineapple_pudding &amp;&amp;
    global.relic_infinity_battery &amp;&amp;
    global.relic_crystal_bacon &amp;&amp;
    global.relic_midnight_beer &amp;&amp;
    global.relic_watchful_eye &amp;&amp;
    global.relic_dev_potion)
        {
            achievement_give("ACHIEVEMENT_ALLRELICS");
        }
        else allUnlocks = false;

    
    if (allUnlocks &amp;&amp;
    global.checkpoint1 &amp;&amp;
    global.checkpoint2 &amp;&amp;
    global.checkpoint3 &amp;&amp;
        
    global.unlock_pistol_assault &amp;&amp;
    global.unlock_pistol_heavy &amp;&amp;
    global.unlock_pistol_plasma &amp;&amp;
    global.unlock_shotgun &amp;&amp;
    global.unlock_shotgun_heavy &amp;&amp;
    global.unlock_submachinegun &amp;&amp;
    global.unlock_highmag &amp;&amp;
    global.unlock_machinegun &amp;&amp;
    global.unlock_assault_rifle &amp;&amp;
    global.unlock_rocketlauncher &amp;&amp;
    global.unlock_sniper_rifle &amp;&amp;
        
    global.unlock_light1 &amp;&amp;
    global.unlock_light2 &amp;&amp;
    global.unlock_medium1 &amp;&amp;
    global.unlock_medium2 &amp;&amp;
    global.unlock_heavy1 &amp;&amp;
    global.unlock_heavy2 &amp;&amp;
    global.unlock_heavy3 &amp;&amp;
    global.unlock_heavy4 &amp;&amp;
    global.unlock_grenades1 &amp;&amp;
    global.unlock_grenades2 &amp;&amp;
    global.unlock_grenades3)
        
        {
            achievement_give("ACHIEVEMENT_UNLOCKALL");
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawns the Stage GUI
instance_create(x,y,gui_stage);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleans unused emitters every X seconds

while (!ds_list_empty(global.audio_cleaner))
{
    destroy_audio = ds_list_find_value(global.audio_cleaner, ds_list_size(global.audio_cleaner)-1);
    if (destroy_audio) audio_emitter_free(destroy_audio);
    ds_list_delete(global.audio_cleaner, ds_list_size(global.audio_cleaner)-1);
}

alarm[3] = room_speed*3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Removes black bars and draws HUD
global.cutscene = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Updates the path-finding for all AI entities
mp_grid_clear_all(global.astar_grid);
mp_grid_add_instances(global.astar_grid,class_solid,false);
alarm[1] = path_refresh;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unpause the game
instance_activate_all(); 
draw_enable_drawevent(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply Global Buffs (Relics and Characters)

//Watchful Eye &amp; Biu
if (global.relic_watchful_eye == 2)
{
    global.ammo_light_max = ammo_light_max_regular + ammo_light_max_relic;
    global.ammo_medium_max = ammo_medium_max_regular + ammo_medium_max_relic;
    global.ammo_heavy_max = ammo_heavy_max_regular + ammo_heavy_max_relic;
    
    if (global.character == char_biu) global.grenades_max = grenades_max_biu+grenades_max_relic;
    else global.grenades_max = grenades_max_regular+grenades_max_relic;
}
else 
{
    global.ammo_light_max = ammo_light_max_regular;
    global.ammo_medium_max = ammo_medium_max_regular;
    global.ammo_heavy_max = ammo_heavy_max_regular;
    
    if (global.character == char_biu) global.grenades_max = grenades_max_biu;
    else global.grenades_max = grenades_max_regular;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Xbox 360 Controller Support

if ((global.input == 'joystick') || (global.pauseMenu)  ) &amp;&amp; (global.version = os_windows)
{
    var update0 = xin_update(0); 
    if (!update0) show_debug_message('Trying to update unconnected Xbox 360 Controller (0)');   
    else
    {
        joy_rumble_update(0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Constrain Mouse to Screen
// This is bad but better than nothing I guess

var hsafety,vsafety;

hsafety = 0.05*window_get_width();
vsafety = 0.05*window_get_height();

if (window_mouse_get_x() &lt; 0+hsafety) window_mouse_set(0+hsafety, window_mouse_get_y());
if (window_mouse_get_y() &lt; 0+vsafety) window_mouse_set(window_mouse_get_x(), 0+vsafety);
if (window_mouse_get_x() &gt; window_get_width()-hsafety) window_mouse_set(window_get_width()-hsafety, window_mouse_get_y());
if (window_mouse_get_y() &gt; window_get_height()-vsafety) window_mouse_set(window_mouse_get_x(), window_get_height()-vsafety);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause
if (global.pause)
{
    global.pause--;
    if global.pause &lt; 0 global.pause = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ammo Control

if (global.ammo_light &gt; global.ammo_light_max) global.ammo_light = global.ammo_light_max;
if (global.ammo_light &lt; 0) global.ammo_light = 0;
if (global.ammo_medium &gt; global.ammo_medium_max) global.ammo_medium = global.ammo_medium_max;
if (global.ammo_medium &lt; 0) global.ammo_medium = 0;
if (global.ammo_heavy &gt; global.ammo_heavy_max) global.ammo_heavy = global.ammo_heavy_max;
if (global.ammo_heavy &lt; 0) global.ammo_heavy = 0;
if (global.grenades &gt; global.grenades_max) global.grenades = global.grenades_max;
if (global.grenades &lt; 0) global.grenades = 0;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level Instantiator

if (!level_built)
{
    //Enemy Group Design (Spawns Everything Within the Group)
    ducan_turtlesquad1_1 = ds_list_create();
    ds_list_add(ducan_turtlesquad1_1, obj_turtle1,obj_turtle1,obj_turtle1);
    
    ducan_turtlesquad1_2 = ds_list_create();
    ds_list_add(ducan_turtlesquad1_2, obj_turtle1,obj_turtle1,obj_turtle1,obj_turtle1_shotgun);
    
    ducan_turtlesquad1_3 = ds_list_create();
    ds_list_add(ducan_turtlesquad1_3, obj_duck1,obj_turtle1_pistoleer,obj_turtle1_pistoleer,obj_turtle1_pistoleer);
    
    ducan_turtlesquad2_1 = ds_list_create();
    ds_list_add(ducan_turtlesquad2_1, obj_turtle2, obj_turtle2_assaultpistol, obj_turtle2, obj_turtle2_shotgun );
    
    ducan_turtlesquad2_2 = ds_list_create();
    ds_list_add(ducan_turtlesquad2_2, obj_turtle2_submachinegun, obj_turtle2_submachinegun, obj_turtle2_submachinegun, obj_turtle2_shotgun );
    
    ducan_turtlesquad3_1 = ds_list_create();
    ds_list_add(ducan_turtlesquad3_1, obj_turtle3, obj_turtle3, obj_turtle3, obj_turtle3 );
    
    ducan_turtlesniper = ds_list_create();
    ds_list_add(ducan_turtlesniper, obj_turtle3_sniper );
    
    /// /// /// ///
    
    ducan_ducksquad1_1 = ds_list_create();
    ds_list_add(ducan_ducksquad1_1, obj_duck1,obj_turtle1,obj_turtle1,obj_turtle1_shotgun);
    
    ducan_ducksquad1_2 = ds_list_create();
    ds_list_add(ducan_ducksquad1_2, obj_duck1_submachinegun,obj_turtle1,obj_turtle1_pistoleer,obj_turtle1_shotgun);
    
    ducan_ducksquad1_3 = ds_list_create();
    ds_list_add(ducan_ducksquad1_3, obj_duck1_submachinegun,obj_duck1,obj_turtle1,obj_turtle1_shotgun);
    
    ducan_ducksquad2_1 = ds_list_create();
    ds_list_add(ducan_ducksquad2_1, obj_duck2_heavy, obj_turtle1_pistoleer, obj_turtle1_pistoleer, obj_turtle2_shotgun);
    
    ducan_ducksquad2_2 = ds_list_create();
    ds_list_add(ducan_ducksquad2_2, obj_duck2_submachinegun, obj_duck1, obj_duck1, obj_turtle2_assaultpistol);
    
    ducan_ducksquad2_3 = ds_list_create();
    ds_list_add(ducan_ducksquad2_3, obj_duck2_shotgun, obj_turtle2_submachinegun, obj_turtle2_submachinegun, obj_turtle2_submachinegun);
    
    ducan_ducksquad3_1 = ds_list_create();
    ds_list_add(ducan_ducksquad3_1, obj_duck3, obj_duck2_shotgun, obj_duck2_shotgun, obj_turtle3);
    
    ducan_ducksquad3_2 = ds_list_create();
    ds_list_add(ducan_ducksquad3_2, obj_duck3_rocket, obj_turtle3, obj_turtle3);
    
    /// /// /// ///
    
    monster_kamikaze_1 = ds_list_create();
    ds_list_add(monster_kamikaze_1, obj_kamikaze1, obj_kamikaze1, obj_kamikaze1, obj_kamikaze1, obj_kamikaze1 );
    
    monster_kamikaze_2 = ds_list_create();
    ds_list_add(monster_kamikaze_2, obj_kamikazelite, obj_kamikazelite, obj_kamikazelite, obj_kamikazelite, obj_kamikazelite );
    
    //Item Group Design (Spawns One Item Randomly)
    
    item_starterweapon_1 = ds_list_create();
    ds_list_add(item_starterweapon_1, obj_pickup_pistol_assault,obj_pickup_shotgun);
    
    item_mediumweapon_1 = ds_list_create();
    ds_list_add(item_mediumweapon_1, obj_pickup_submachinegun, obj_pickup_pistol_heavy);
    
    item_mediumweapon_2 = ds_list_create();
    ds_list_add(item_mediumweapon_2, obj_pickup_pistol_heavy, obj_pickup_assault_rifle);
    
    item_heavyweapon_1 = ds_list_create();
    ds_list_add(item_heavyweapon_1, obj_pickup_machinegun, obj_pickup_assault_rifle);
    
    item_heavyweapon_2 = ds_list_create();
    ds_list_add(item_heavyweapon_2, obj_pickup_assault_rifle, obj_pickup_sniper_rifle);
    
    item_superweapon_1 = ds_list_create();
    ds_list_add(item_superweapon_1, obj_pickup_shotgun_heavy, obj_pistol_plasma,  obj_pistol_plasma, obj_pickup_machinegun, obj_pickup_assault_rifle, obj_pickup_pistol_heavy );
    
    item_rocketlauncher_1 = ds_list_create();
    ds_list_add(item_rocketlauncher_1, obj_pickup_rocketlauncher);
    
    item_starterammo_1 = ds_list_create();
    ds_list_add(item_starterammo_1, obj_pickup_lightammo,obj_pickup_lightammo,obj_pickup_mediumammo);
    
    item_starterhealth_1 = ds_list_create();
    ds_list_add(item_starterhealth_1, obj_pickup_health);
    
    item_engamehealth_1 = ds_list_create();
    ds_list_add(item_engamehealth_1, obj_pickup_healthBig);
    
    item_starteraid_1 = ds_list_create();
    ds_list_add(item_starteraid_1, obj_pickup_lightammo, obj_pickup_lightammo, obj_pickup_lightammo, obj_pickup_health, obj_pickup_healthBig, obj_pickup_grenade);
    
    item_grenade_1 = ds_list_create();
    ds_list_add(item_grenade_1, obj_pickup_grenade);
    
    item_mediumammo_1 = ds_list_create();
    ds_list_add(item_mediumammo_1, obj_pickup_mediumammo, obj_pickup_mediumammo, obj_pickup_heavyammo, obj_pickup_grenade);
    
    item_heavyammo_1 = ds_list_create();
    ds_list_add(item_heavyammo_1, obj_pickup_heavyammo);
    
    item_endgameaid_1 = ds_list_create();
    ds_list_add(item_endgameaid_1, obj_pickup_healthBig, obj_pickup_healthBig, obj_pickup_grenade, obj_pickup_heavyammo, obj_pickup_mediumammo);
    
    
    //Shop Lists
    global.shop_list_1 = ds_list_create();
    global.shop_size_1 = 10;
    if (!global.unlock_light1) ds_list_add(global.shop_list_1, obj_shop_light1);
    if (!global.unlock_pistol_assault) ds_list_add(global.shop_list_1, obj_shop_pistol_assault);
    if (!global.unlock_shotgun) ds_list_add(global.shop_list_1, obj_shop_shotgun);
    if (!global.unlock_light2) ds_list_add(global.shop_list_1, obj_shop_light2);
    if (!global.unlock_medium1) ds_list_add(global.shop_list_1, obj_shop_medium1);
    if (!global.unlock_grenades1) ds_list_add(global.shop_list_1, obj_shop_grenades1);
    if (!global.relic_pineapple1) ds_list_add(global.shop_list_1, obj_shop_pineapple1);
    if (!global.relic_pineapple2) ds_list_add(global.shop_list_1, obj_shop_pineapple2);
    if (!global.relic_pineapple3) ds_list_add(global.shop_list_1, obj_shop_pineapple3);
    if (!global.relic_yottabyte1) ds_list_add(global.shop_list_1, obj_shop_yottabyte1);
    
    global.shop_free_1 = ds_list_create();
    ds_list_add(global.shop_free_1, obj_pickup_lightammo, obj_pickup_lightammo, obj_pickup_lightammo, obj_pickup_health, obj_pickup_grenade);
    
    
    global.shop_list_2 = ds_list_create();
    global.shop_size_2 = 15;
    if (!global.unlock_medium2) ds_list_add(global.shop_list_2, obj_shop_medium2);
    if (!global.unlock_grenades2) ds_list_add(global.shop_list_2, obj_shop_grenades2);
    if (!global.unlock_heavy1) ds_list_add(global.shop_list_2, obj_shop_heavy1);
    if (!global.unlock_assault_rifle) ds_list_add(global.shop_list_2, obj_shop_assault_rifle);
    if (!global.unlock_pistol_heavy) ds_list_add(global.shop_list_2, obj_shop_pistol_heavy);
    if (!global.unlock_submachinegun) ds_list_add(global.shop_list_2, obj_shop_submachinegun);
    if (!global.relic_alcoholic1) ds_list_add(global.shop_list_2, obj_shop_alcoholic1);
    if (!global.relic_alcoholic2) ds_list_add(global.shop_list_2, obj_shop_alcoholic2);
    if (!global.relic_alcoholic3) ds_list_add(global.shop_list_2, obj_shop_alcoholic3);
    if (!global.relic_yottabyte2) ds_list_add(global.shop_list_2, obj_shop_yottabyte2);
    if (!global.relic_yottabyte3) ds_list_add(global.shop_list_2, obj_shop_yottabyte3);
    if (!global.relic_watchful1) ds_list_add(global.shop_list_2, obj_shop_watchful1);
    if (!global.relic_watchful2) ds_list_add(global.shop_list_2, obj_shop_watchful2);
    if (!global.relic_watchful3) ds_list_add(global.shop_list_2, obj_shop_watchful3);
    
    if (!global.relic_crystal1) ds_list_add(global.shop_list_2, obj_shop_crystal1);
    
    global.shop_free_2 = ds_list_create();
    ds_list_add(global.shop_free_2, obj_pickup_lightammo, obj_pickup_mediumammo, obj_pickup_lightammo, obj_pickup_health, obj_pickup_grenade);
    
    
    global.shop_list_3 = ds_list_create();
    global.shop_size_3 = 16;
    if (!global.unlock_grenades3) ds_list_add(global.shop_list_3, obj_shop_grenades3);
    if (!global.unlock_heavy2) ds_list_add(global.shop_list_3, obj_shop_heavy2);
    if (!global.unlock_heavy3) ds_list_add(global.shop_list_3, obj_shop_heavy3);
    if (!global.unlock_heavy4) ds_list_add(global.shop_list_3, obj_shop_heavy4);
    if (!global.unlock_pistol_plasma) ds_list_add(global.shop_list_3, obj_shop_pistol_plasma);
    if (!global.unlock_highmag) ds_list_add(global.shop_list_3, obj_shop_highmag);
    if (!global.unlock_machinegun) ds_list_add(global.shop_list_3, obj_shop_machinegun);
    if (!global.unlock_sniper_rifle) ds_list_add(global.shop_list_3, obj_shop_sniper_rifle);
    if (!global.relic_midnight1) ds_list_add(global.shop_list_3, obj_shop_midnight1);
    if (!global.relic_midnight2) ds_list_add(global.shop_list_3, obj_shop_midnight2);
    if (!global.relic_midnight3) ds_list_add(global.shop_list_3, obj_shop_midnight3);
    if (!global.relic_infinity1) ds_list_add(global.shop_list_3, obj_shop_infinity1);
    if (!global.relic_infinity2) ds_list_add(global.shop_list_3, obj_shop_infinity2);
    if (!global.relic_infinity3) ds_list_add(global.shop_list_3, obj_shop_infinity3);
    if (!global.relic_crystal2) ds_list_add(global.shop_list_3, obj_shop_crystal2);
    if (!global.relic_dev1) ds_list_add(global.shop_list_3, obj_shop_dev1);
    
    global.shop_free_3 = ds_list_create();
    ds_list_add(global.shop_free_3, obj_pickup_mediumammo, obj_pickup_heavyammo, obj_pickup_health, obj_pickup_health, obj_pickup_grenade);
    
    
    global.shop_list_4 = ds_list_create();
    global.shop_size_4 = 5;
    
    if (!global.unlock_shotgun_heavy) ds_list_add(global.shop_list_4, obj_shop_shotgun_heavy);
    if (!global.unlock_rocketlauncher) ds_list_add(global.shop_list_4, obj_shop_rocketlauncher);
    if (!global.relic_crystal3) ds_list_add(global.shop_list_4, obj_shop_crystal3);
    if (!global.relic_dev2) ds_list_add(global.shop_list_4, obj_shop_dev2);
    if (!global.relic_dev3) ds_list_add(global.shop_list_4, obj_shop_dev3);
    
    global.shop_free_4 = ds_list_create();
    ds_list_add(global.shop_free_4, obj_pickup_heavyammo, obj_pickup_heavyammo, obj_pickup_heavyammo, obj_pickup_health, obj_pickup_grenade);
    
    //Stage Design
    shop_empty_pool = ds_list_create();
    
    enemy_pool_1_1 = ds_list_create();
    ds_list_add(enemy_pool_1_1, ducan_turtlesquad1_1, ducan_turtlesquad1_1, ducan_turtlesquad1_1, ducan_turtlesquad1_1 );
    
    enemy_pool_1_2 = ds_list_create();
    ds_list_add(enemy_pool_1_2, ducan_ducksquad1_1, ducan_turtlesquad1_1, ducan_turtlesquad1_1, ducan_turtlesquad1_1, ducan_turtlesquad1_2 );
    
    enemy_pool_1_3 = ds_list_create();
    ds_list_add(enemy_pool_1_3, ducan_turtlesquad1_2, monster_kamikaze_1, monster_kamikaze_1, monster_kamikaze_1, monster_kamikaze_1, monster_kamikaze_1 );
    
    enemy_pool_2_1 = ds_list_create();
    ds_list_add(enemy_pool_2_1, ducan_turtlesquad1_3, ducan_ducksquad1_1, ducan_ducksquad1_1, ducan_ducksquad1_2, ducan_turtlesquad2_1 );
    
    enemy_pool_2_2 = ds_list_create();
    ds_list_add(enemy_pool_2_2, ducan_ducksquad1_3, ducan_ducksquad1_2, ducan_ducksquad1_2, ducan_ducksquad1_1 );
    
    enemy_pool_2_3 = ds_list_create();
    ds_list_add(enemy_pool_2_3, ducan_ducksquad2_1, ducan_ducksquad1_3, ducan_turtlesquad2_1, ducan_turtlesquad2_1, ducan_turtlesquad2_2 );
    
    enemy_pool_3_1 = ds_list_create();
    ds_list_add(enemy_pool_3_1, ducan_ducksquad2_3, monster_kamikaze_1, monster_kamikaze_1, monster_kamikaze_1, monster_kamikaze_2, monster_kamikaze_2 );
    
    enemy_pool_3_2 = ds_list_create();
    ds_list_add(enemy_pool_3_2, monster_kamikaze_2, monster_kamikaze_2, monster_kamikaze_2, monster_kamikaze_2, ducan_ducksquad2_2, ducan_ducksquad2_3, ducan_ducksquad2_1);
    
    enemy_pool_3_3 = ds_list_create();
    ds_list_add(enemy_pool_3_3, ducan_ducksquad2_2, ducan_ducksquad2_1, ducan_ducksquad2_3, ducan_turtlesquad3_1, ducan_turtlesquad3_1);
    
    enemy_pool_4_1 = ds_list_create();
    ds_list_add(enemy_pool_4_1, ducan_turtlesquad3_1, ducan_turtlesquad3_1, ducan_turtlesquad3_1, ducan_turtlesniper, ducan_turtlesniper, ducan_turtlesniper, ducan_turtlesniper);
    
    enemy_pool_4_2 = ds_list_create();
    ds_list_add(enemy_pool_4_2, ducan_turtlesquad3_1, ducan_turtlesquad3_1, ducan_ducksquad2_1, ducan_ducksquad3_1, ducan_ducksquad3_1);
    
    enemy_pool_4_3 = ds_list_create();
     ds_list_add(enemy_pool_4_3, ducan_turtlesquad3_1, ducan_ducksquad3_1, ducan_ducksquad3_1, ducan_ducksquad3_2, ducan_ducksquad3_2);
    
    
    ///  ///  ///
    
    item_pool_1_1 = ds_list_create();
    ds_list_add(item_pool_1_1, item_starterammo_1, item_starterammo_1, item_starterhealth_1, item_starteraid_1, item_starteraid_1);
    
    item_pool_1_2 = ds_list_create();
    ds_list_add(item_pool_1_2, item_starterweapon_1, item_starterammo_1, item_starteraid_1, item_starterammo_1, item_starteraid_1);
    
    item_pool_1_3 = ds_list_create();
    ds_list_add(item_pool_1_3, item_starterammo_1, item_starterammo_1, item_starterammo_1, item_mediumammo_1, item_starteraid_1, item_grenade_1);
    
    item_pool_2_1 = ds_list_create();
    ds_list_add(item_pool_2_1, item_starterammo_1, item_starteraid_1, item_mediumammo_1, item_starteraid_1);
    
    item_pool_2_2 = ds_list_create();
    ds_list_add(item_pool_2_2, item_starterweapon_1, item_starterammo_1, item_starterammo_1, item_starteraid_1, item_starteraid_1);
    
    item_pool_2_3 = ds_list_create();
    ds_list_add(item_pool_2_3, item_mediumweapon_1, item_starterammo_1, item_mediumammo_1, item_grenade_1, item_starteraid_1, item_grenade_1);
    
    item_pool_3_1 = ds_list_create();
    ds_list_add(item_pool_3_1, item_starterammo_1, item_mediumammo_1, item_starteraid_1, item_starteraid_1, item_starteraid_1, item_grenade_1);
    
    item_pool_3_2 = ds_list_create();
    ds_list_add(item_pool_3_2, item_starterweapon_1, item_starteraid_1, item_starterhealth_1, item_grenade_1, item_starterammo_1, item_grenade_1);
    
    item_pool_3_3 = ds_list_create();
    ds_list_add(item_pool_3_3, item_mediumammo_1, item_mediumammo_1, item_mediumammo_1, item_starteraid_1, item_superweapon_1, item_starteraid_1, item_grenade_1);
    
    item_pool_4_1 = ds_list_create();
    ds_list_add(item_pool_4_1, item_heavyweapon_1, item_heavyweapon_2, item_heavyammo_1, item_heavyammo_1, item_heavyammo_1, item_endgameaid_1, item_starteraid_1);
    
    item_pool_4_2 = ds_list_create();
    ds_list_add(item_pool_4_2, item_heavyammo_1, item_mediumammo_1, item_starteraid_1, item_endgameaid_1, item_grenade_1, item_starterammo_1, item_mediumammo_1);
    
    item_pool_4_3 = ds_list_create();
    ds_list_add(item_pool_4_3, item_rocketlauncher_1, item_heavyammo_1, item_heavyammo_1, item_mediumammo_1, item_endgameaid_1, item_grenade_1, item_mediumammo_1, item_starterammo_1);
    
    
    item_pool_boss = ds_list_create();
    ds_list_add(item_pool_boss, item_heavyammo_1, item_heavyammo_1, item_heavyammo_1, item_heavyammo_1, item_heavyammo_1, item_heavyammo_1, item_heavyammo_1, item_heavyammo_1);
    ds_list_add(item_pool_boss, item_mediumammo_1, item_mediumammo_1, item_mediumammo_1, item_mediumammo_1, item_mediumammo_1, item_mediumammo_1, item_mediumammo_1, item_mediumammo_1);
    ds_list_add(item_pool_boss, item_starterammo_1, item_starterammo_1, item_starterammo_1, item_starterammo_1, item_starterammo_1, item_starterammo_1, item_starterammo_1, item_starterammo_1, item_starterammo_1);
    ds_list_add(item_pool_boss, item_heavyweapon_1, item_heavyweapon_2, item_mediumweapon_1, item_mediumweapon_1, item_starterweapon_1, item_starterweapon_1, item_starteraid_1, item_starteraid_1, item_starteraid_1);
    ds_list_add(item_pool_boss, item_starterhealth_1, item_starterhealth_1, item_engamehealth_1, item_engamehealth_1);
    
}

/////////////////////////////////////////////////////////////////////

if (room == room_start)
{
    level_built = true;
}

if (!level_built)
{
    //Instantiate Player
    player_spawn_number = instance_number(obj_spawn_player);
    random_spawn = irandom(player_spawn_number-1);
    target_spawn = instance_find(obj_spawn_player,random_spawn);
    if (global.character == char_jimmy) instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_jimmy);
    if (global.character == char_pinky) instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_pinky);
    if (global.character == char_raff) instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_raff);
    if (global.character == char_biu) instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_biu);
    if (global.character == char_punny) instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_punny);
    if (global.character == char_ass) instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_assPlayer);
    
    teleporter = instance_create(target_spawn.spawnX,target_spawn.spawnY-10,obj_teleporter);
    teleporter.active = false;
    
    //Instantiate Enemies
    if (room == room_shop) || (room == room_tutorial) || (room == room_boss) enemy_pool = shop_empty_pool;
    if (room == level1_1) enemy_pool = enemy_pool_1_1;
    if (room == level1_2) enemy_pool = enemy_pool_1_2;
    if (room == level1_3) enemy_pool = enemy_pool_1_3;
    if (room == level2_1) enemy_pool = enemy_pool_2_1;
    if (room == level2_2) enemy_pool = enemy_pool_2_2;
    if (room == level2_3) enemy_pool = enemy_pool_2_3;
    if (room == level3_1) enemy_pool = enemy_pool_3_1;
    if (room == level3_2) enemy_pool = enemy_pool_3_2;
    if (room == level3_3) enemy_pool = enemy_pool_3_3;
    if (room == level4_1) enemy_pool = enemy_pool_4_1;
    if (room == level4_2) enemy_pool = enemy_pool_4_2;
    if (room == level4_3) enemy_pool = enemy_pool_4_3;
    
    while (!ds_list_empty(enemy_pool))
    {
        pick_random_group = irandom(ds_list_size(enemy_pool)-1);
        random_group = ds_list_find_value(enemy_pool,pick_random_group);
        ds_list_delete(enemy_pool,pick_random_group);
        
        current_group = ds_list_create();
        ds_list_copy(current_group, random_group);
        
        enemy_spawn_number = instance_number(obj_spawn_enemy);
        random_spawn = irandom(enemy_spawn_number-1);
        target_spawn = instance_find(obj_spawn_enemy,random_spawn);
        
        while (!ds_list_empty(current_group)) &amp;&amp; (instance_exists(target_spawn))
        {
            spawnX = target_spawn.spawnX + random_range(-128,128);
            spawnY = target_spawn.spawnY + random_range(-128,128);
            
            if collision_circle(spawnX,spawnY,40,class_solid,false,true) &lt; 0 
            {
                list_position = ds_list_size(current_group)-1;
                spawnee = ds_list_find_value(current_group, list_position);
                instance_create(spawnX,spawnY,spawnee);
                ds_list_delete(current_group,list_position);
            }
        }
        ds_list_destroy(current_group);
        with (target_spawn) { instance_destroy(); }
    }
    
    with (obj_spawn_enemy)
    {
        instance_destroy();
    }
    

    //Instantiate Items
    if (room == room_shop) || (room == room_tutorial) item_pool = shop_empty_pool;
    if (room == level1_1) item_pool = item_pool_1_1;
    if (room == level1_2) item_pool = item_pool_1_2;
    if (room == level1_3) item_pool = item_pool_1_3;
    if (room == level2_1) item_pool = item_pool_2_1;
    if (room == level2_2) item_pool = item_pool_2_2;
    if (room == level2_3) item_pool = item_pool_2_3;
    if (room == level3_1) item_pool = item_pool_3_1;
    if (room == level3_2) item_pool = item_pool_3_2;
    if (room == level3_3) item_pool = item_pool_3_3;
    if (room == level4_1) item_pool = item_pool_4_1;
    if (room == level4_2) item_pool = item_pool_4_2;
    if (room == level4_3) item_pool = item_pool_4_3;
    if (room == room_boss) item_pool = item_pool_boss;

    while (!ds_list_empty(item_pool))
    {
        pick_random_group = irandom(ds_list_size(item_pool)-1);
        random_group = ds_list_find_value(item_pool,pick_random_group);
        ds_list_delete(item_pool,pick_random_group);
        
        current_group = ds_list_create();
        ds_list_copy(current_group, random_group);
        
        item_spawn_number = instance_number(obj_spawn_item);
        random_spawn = irandom(item_spawn_number-1);
        target_spawn = instance_find(obj_spawn_item,random_spawn);
        
        if instance_exists(target_spawn)
        {
            spawnX = target_spawn.spawnX;
            spawnY = target_spawn.spawnY;
            
            list_position = irandom(ds_list_size(current_group)-1);
            spawnee = ds_list_find_value(current_group, list_position);
            instance_create(spawnX,spawnY,spawnee);
            with (target_spawn) { instance_destroy(); }
        }
        ds_list_destroy(current_group);
    }
    
    with (obj_spawn_item)
    {
        instance_destroy();
    }
    
    //Done
    level_built = true;  
    
    //Clear Lists From Memory
    ds_list_destroy(ducan_turtlesquad1_1);
    ds_list_destroy(ducan_turtlesquad1_2);
    ds_list_destroy(ducan_turtlesquad1_3);
    ds_list_destroy(ducan_turtlesquad2_1);
    ds_list_destroy(ducan_turtlesquad2_2);
    ds_list_destroy(ducan_turtlesquad3_1);
    ds_list_destroy(ducan_turtlesniper);
    
    ds_list_destroy(ducan_ducksquad1_1);
    ds_list_destroy(ducan_ducksquad1_2);
    ds_list_destroy(ducan_ducksquad1_3);
    ds_list_destroy(ducan_ducksquad2_1);
    ds_list_destroy(ducan_ducksquad2_2);
    ds_list_destroy(ducan_ducksquad2_3);
    ds_list_destroy(ducan_ducksquad3_1);
    ds_list_destroy(ducan_ducksquad3_2);
    
    ds_list_destroy(monster_kamikaze_1);
    ds_list_destroy(monster_kamikaze_2);
    
    ds_list_destroy(shop_empty_pool);
    ds_list_destroy(enemy_pool_1_1);
    ds_list_destroy(enemy_pool_1_2);
    ds_list_destroy(enemy_pool_1_3);
    ds_list_destroy(enemy_pool_2_1);
    ds_list_destroy(enemy_pool_2_2);
    ds_list_destroy(enemy_pool_2_3);
    ds_list_destroy(enemy_pool_3_1);
    ds_list_destroy(enemy_pool_3_2);
    ds_list_destroy(enemy_pool_3_3);
    ds_list_destroy(enemy_pool_4_1);
    ds_list_destroy(enemy_pool_4_2);
    ds_list_destroy(enemy_pool_4_3);
    ds_list_destroy(item_pool_1_1);
    ds_list_destroy(item_pool_1_2);
    ds_list_destroy(item_pool_1_3);
    ds_list_destroy(item_pool_2_1);
    ds_list_destroy(item_pool_2_2);
    ds_list_destroy(item_pool_2_3);
    ds_list_destroy(item_pool_3_1);
    ds_list_destroy(item_pool_3_2);
    ds_list_destroy(item_pool_3_3);
    ds_list_destroy(item_pool_4_1);
    ds_list_destroy(item_pool_4_2);
    ds_list_destroy(item_pool_4_3);
    ds_list_destroy(item_pool_boss);
    
    ds_list_destroy(item_starterweapon_1);
    ds_list_destroy(item_mediumweapon_1);
    ds_list_destroy(item_mediumweapon_2);
    ds_list_destroy(item_heavyweapon_1);
    ds_list_destroy(item_heavyweapon_2);
    ds_list_destroy(item_superweapon_1);
    ds_list_destroy(item_rocketlauncher_1);
    ds_list_destroy(item_starterammo_1);
    ds_list_destroy(item_starterhealth_1);
    ds_list_destroy(item_engamehealth_1);
    ds_list_destroy(item_starteraid_1);
    ds_list_destroy(item_grenade_1);
    ds_list_destroy(item_mediumammo_1);
    ds_list_destroy(item_heavyammo_1);
    ds_list_destroy(item_endgameaid_1);
    
    ds_list_destroy(enemy_pool);
    ds_list_destroy(item_pool);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level Exit

if (!(room == room_start)) &amp;&amp; (!(room == room_tutorial)) &amp;&amp; (!(room == room_shop)) &amp;&amp; (!(room == room_boss))
{
    if (!instance_exists(class_enemy)) &amp;&amp; (!instance_exists(obj_kamikazelite_flying)) &amp;&amp; (instance_exists(class_player)) &amp;&amp; (!level_end)
    {
        var tries;
        tries=0;
        while (!level_end)
        {
            randomX = class_player.x + irandom_range(-100,100);
            randomY = class_player.y + irandom_range(-100,100);
            
            if collision_circle(randomX,randomY,63,class_solid,false,true) &lt; 0
            {
                level_end = true
            }
            tries++;
            if (tries &gt;= 10)
            {
                randomX = class_player.x;
                randomY = class_player.y;
                level_end = true;
            }
        }
        ass = instance_create(randomX,randomY,obj_ass);   
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dust and Fog

tile_layer_shift(-9024, -0.12, 0);
tile_layer_shift(-9048, -0.2, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Data and Advance the Game

if (global.stage_current == 1) &amp;&amp; (global.checkpoint1 == 0) global.checkpoint1 = 1;
if (global.stage_current == 2) &amp;&amp; (global.checkpoint2 == 0) global.checkpoint2 = 1;
if (global.stage_current == 3) &amp;&amp; (global.checkpoint3 == 0) global.checkpoint3 = 1;

if (global.level_complete)
{

    save_and_clean();
    
    if (room == room_shop) || (room == room_start)
    {
        //Test boss:  room_goto(room_boss); exit;

        if (global.stage_current == 0) room_goto(level1_1);
        if (global.stage_current == 1) room_goto(level2_1);
        if (global.stage_current == 2) room_goto(level3_1);
        if (global.stage_current == 3) room_goto(level4_1);
        if (global.stage_current == 4) room_goto(room_boss);

        exit;
    }
    
    if (room == level1_3) { room_goto(room_shop); exit; }
    if (room == level2_3) { room_goto(room_shop); exit; }
    if (room == level3_3) { room_goto(room_shop); exit; }
    if (room == level4_3) { room_goto(room_shop); exit; }
    
    if (room == room_boss) 
    { 
        if (global.stage_current != -9)
        {
            room_goto(room_end); 
            exit;
        }
        else { room_goto(level1_1); exit; } //Secret room portal
    }
    
    if room_exists(room_next(room)) room_goto_next();
    else room_goto(room == room_start);
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle Systems Manager

if (!ds_list_empty(global.particle_list)) &amp;&amp; (!global.pause)
{
    for (i=0; i&lt;ds_list_size(global.particle_list); i++)
    {
        particle_system = ds_list_find_value(global.particle_list,i);
        part_system_update(particle_system);
        
        if !part_particles_count(particle_system)
        {
            part_emitter_destroy_all(particle_system);
            part_system_destroy(particle_system);
            ds_list_delete(global.particle_list,i);
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause Menu Control

var pauseKeyPressed = false;

if (!global.gameOver)
{
    if keyboard_check_pressed(vk_escape) pauseKeyPressed = true;
    if (global.input == 'joystick') if joy_check_pressed(0,8)  pauseKeyPressed = true;
}

if (pauseKeyPressed)
{
    if (!global.pauseMenu) game_pause();
    else game_unpause();
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Quality Options

screen_update();

///Maximum Number of Shot Particles
global.count_particles = instance_number(fx_hit);

//Maximum Number of Shot Casings
global.count_casings = instance_number(fx_casing) + instance_number(fx_blood);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG COMMANDS

if (debug_mode)
{
    ///Mute the Music
    
    if keyboard_check_pressed(ord('M'))
    {
        global.music = !global.music;
    }
    
    if (!global.music)
    {
        if audio_is_playing(bgm_main) audio_stop_sound(bgm_main);
        if audio_is_playing(bgm_shop) audio_stop_sound(bgm_shop);
        if audio_is_playing(bgm_stage1) audio_stop_sound(bgm_stage1);
        if audio_is_playing(bgm_stage2) audio_stop_sound(bgm_stage2);
        if audio_is_playing(bgm_stage3) audio_stop_sound(bgm_stage3);
        if audio_is_playing(bgm_stage4) audio_stop_sound(bgm_stage4);
    }
    
    ///Toggle Reflections
    if keyboard_check_pressed(vk_f5) global.reflections_toggle = !global.reflections_toggle;
    
    ///Toggle Persistent Objects
    if keyboard_check_pressed(vk_f6) global.persistent_toggle = !global.persistent_toggle;
    
    ///Toggle Shadows
    if keyboard_check_pressed(vk_f7) global.shadows_toggle = !global.shadows_toggle;
    
    //Toggle Keyboard/Joystick
    if keyboard_check_pressed(vk_f2) if (global.input == 'keyboard') global.input = 'joystick';
    else global.input = 'keyboard';
    
    //Toggle Joystick Aiming Options
    if keyboard_check_pressed(ord('P'))
    {
        if (global.auto_aim == K_AUTOAIM_ASSIST) global.auto_aim = K_AUTOAIM_FULL;
        else global.auto_aim = K_AUTOAIM_ASSIST;
    }
    
    //Toggle Debug Visualization of Pathfinding Grid
    if keyboard_check_pressed(vk_f11)
    {
        global.drawGridDebug = !global.drawGridDebug;
    }
    
    //Debug: Manually Restart the Game
    if keyboard_check_pressed(vk_f12)
    {
        save_and_clean();
        game_restart();
    }
    
    //Debug: Kill Everything
    if keyboard_check_pressed(vk_f9)
    {
        if instance_exists(class_enemy)
        {
            with (class_enemy)
            {
                instance_destroy();
            }
        }
    }
    
    //Debug: Erase Save File
    if keyboard_check_pressed(vk_f10)
    {
        file_delete(working_directory + "\saveData.ini");
        game_restart();
    }
    
    //Debug: Toggle Hud, comment this to deactivate
    main_hud_alpha = 0;

    //Debug: Erase Steam Achievements
    if keyboard_check_pressed(ord("U"))
    {
        steam_clear_achievement("ACHIEVEMENT_KILLCOMBO"); //done, set by gui_score
        steam_clear_achievement("ACHIEVEMENT_FIRSTRELIC"); 
        steam_clear_achievement("ACHIEVEMENT_ALLRELICS"); //done,set by Main
        steam_clear_achievement("ACHIEVEMENT_UNLOCKALL"); //ok, falta characters, set by Main
        steam_clear_achievement("ACHIEVEMENT_BEATGAME"); //done, set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_UNLOCKALLHUNTERS"); 
        steam_clear_achievement("ACHIEVEMENT_UNLOCKRAFF"); 
        steam_clear_achievement("ACHIEVEMENT_ULTIMATERAFF"); //done, set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_UNLOCKBIU"); 
        steam_clear_achievement("ACHIEVEMENT_UNLOCKPUNNY"); 
        steam_clear_achievement("ACHIEVEMENT_ULTIMATEPUNNY"); //done, set by Boss corpse 
        steam_clear_achievement("ACHIEVEMENT_JIMMYNOWEAPONS");  //done, set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_BIUNOWEAPONS");  //done, set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_UNLOCKASS"); 
        steam_clear_achievement("ACHIEVEMENT_BEATGAMEWITHASS");  //done, set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_ULTIMATEPINKY");  //done, set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_TUTORIAL"); //done, set on dummy immortal
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take Screenshot
steam_screenshot_check();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unlock New Hunters + Achievements

if (global.statTotalBounty &gt;= 80000) &amp;&amp; (!global.unlockPunny)
{
    global.unlockPunny = true;
    achievement_give("ACHIEVEMENT_UNLOCKPUNNY");
    announce = instance_create(x,y,fx_bigMessage);
    announce.textBig = "NEW HUNTER UNLOCKED!";
    announce.textSmall = "YOU CAN NOW PLAY WITH PUNNY";
    announce.hunterUnlockSprite = spr_hud_face_punny;
}

if (global.statKilledByBoss &gt;= 5) &amp;&amp; (!global.unlockAss)
{
    global.unlockAss = true;
    achievement_give("ACHIEVEMENT_UNLOCKASS");
    announce = instance_create(x,y,fx_bigMessage);
    announce.textBig = "NEW HUNTER UNLOCKED!";
    announce.textSmall = "YOU CAN NOW PLAY WITH ASS";
    announce.hunterUnlockSprite = spr_hud_face_ass;
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set GUI Size
originalX = 1920;
originalY = 1080;
display_set_gui_size(window_get_width(), window_get_height());
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main HUD Draw

if (!surface_exists(guiSurface))
{
    guiSurface = surface_create(1920,1080);
}
surface_set_target(guiSurface);
draw_clear_alpha(c_white,0);

draw_set_alpha(main_hud_alpha);

var width = 1920;
var height = 1080;

if instance_exists(class_player)
{
    //Get Basic Player Values
    energy = class_player.energy;
    energy_max = class_player.energy_max;
    hp = class_player.hp;
    hp_max = class_player.hp_max;
    stamina = class_player.stamina;
    stamina_max = class_player.stamina_max;
    
    //Character Portrait 1
    var charPortraitX = width*0.02;
    var charPortraitY = height*0.09;
    
    if (class_player.hp &gt;= class_player.hp_max*0.66) { sprite_face = 0; healthColor = c_white; }
    if (class_player.hp &lt; class_player.hp_max*0.66) { sprite_face = 1; healthColor = c_yellow; }
    if (class_player.hp &lt; class_player.hp_max*0.33) { sprite_face = 2; healthColor = c_red; }
    
    if (global.character == char_jimmy) draw_sprite_ext(spr_hud_face_jimmy,sprite_face,charPortraitX,charPortraitY,1.5,1.5,1,c_white,main_hud_alpha);
    if (global.character == char_pinky) draw_sprite_ext(spr_hud_face_pinky,sprite_face,charPortraitX,charPortraitY,1.5,1.5,1,c_white,main_hud_alpha);
    if (global.character == char_raff) draw_sprite_ext(spr_hud_face_raff,sprite_face,charPortraitX,charPortraitY,1.5,1.5,1,c_white,main_hud_alpha);
    if (global.character == char_biu) draw_sprite_ext(spr_hud_face_biu,sprite_face,charPortraitX,charPortraitY,1.5,1.5,1,c_white,main_hud_alpha);
    if (global.character == char_punny) draw_sprite_ext(spr_hud_face_punny,sprite_face,charPortraitX,charPortraitY,1.5,1.5,1,c_white,main_hud_alpha);
    if (global.character == char_ass) draw_sprite_ext(spr_hud_face_ass,sprite_face,charPortraitX,charPortraitY,1.5,1.5,1,c_white,main_hud_alpha);
    
    //Character Bars
    var charLifeBarTopX = width*0.08;
    var charLifeBarTopY = height*0.062;
    var charLifeBarWidth = 250;
    var charLifeBarHeight = 70;
    
    var charShieldBarTopX = width*0.076;
    var charShieldBarTopY = height*0.1;
    var charShieldBarWidth = 230;
    var charShieldBarHeight = 37;
    
    var charStaminaBarTopX = charShieldBarTopX;
    var charStaminaBarTopY = charShieldBarTopY+charShieldBarHeight+6;
    var charStaminaBarWidth = 230;
    var charStaminaBarHeight = 10;
    
    draw_set_valign(fa_center);
    draw_set_halign(fa_right);
    
    var charLifeColor = make_color_rgb(184,49,35);
    var charShieldColor = make_color_rgb(50,133,158);
    var charBarDelaySpeed = 0.008;
    var charBarDelayTime = room_speed*0.6;
    
    //Health
    draw_set_color(c_black);
    draw_set_alpha(0.8*main_hud_alpha);
    draw_rectangle(charLifeBarTopX,charLifeBarTopY,charLifeBarTopX+charLifeBarWidth,charLifeBarTopY+charLifeBarHeight,false);
    draw_set_alpha(0.9*main_hud_alpha);
    draw_healthbar_delayed(delayedCharHealthBar1, charLifeBarTopX-5,charLifeBarTopY-5,charLifeBarTopX+charLifeBarWidth-5,charLifeBarTopY+charLifeBarHeight-5, hp, hp_max, charLifeColor, c_black, c_white, charBarDelaySpeed, charBarDelayTime, 0, false, false);
    draw_sprite_ext(spr_icon_health,0,charLifeBarTopX+20,charLifeBarTopY+20,1.5,1.5,0,c_white,main_hud_alpha);
    
    draw_set_color(c_white);
    draw_set_font(font_wendy30);
    draw_text(charLifeBarTopX+charLifeBarWidth-14, charLifeBarTopY+14,string(hp));
    
    //Shields &amp; Stamina
    draw_set_color(c_black);
    draw_set_alpha(0.8*main_hud_alpha);
    draw_rectangle(charShieldBarTopX,charShieldBarTopY,charShieldBarTopX+charShieldBarWidth,charShieldBarTopY+charShieldBarHeight,false);
    draw_rectangle(charStaminaBarTopX,charStaminaBarTopY,charStaminaBarTopX+charStaminaBarWidth,charStaminaBarTopY+charStaminaBarHeight,false);
    
    draw_set_alpha(0.9*main_hud_alpha);
    if (energy_max) draw_healthbar_delayed(delayedCharShieldBar1, charShieldBarTopX-5,charShieldBarTopY-5,charShieldBarTopX+charShieldBarWidth-5,charShieldBarTopY+charShieldBarHeight-5, energy, energy_max, charShieldColor, c_black, c_white, charBarDelaySpeed, charBarDelayTime, 0, false, false);
    draw_sprite_ext(spr_icon_shield,0,charShieldBarTopX+20,charShieldBarTopY+(charShieldBarHeight/2),1.5,1.5,0,c_white,main_hud_alpha);
    draw_set_color(c_white);
    draw_set_font(font_wendy15);
    draw_text(charLifeBarTopX+charShieldBarWidth-16, charShieldBarTopY+12,string(energy));
    
    var staminaColor1,staminaColor2;
    if (stamina &gt; (stamina_max/2)) staminaColor1 = c_white;
    else staminaColor1 = c_gray;
    if (stamina &gt;= (stamina_max)) staminaColor2 = c_white;
    else staminaColor2 = c_gray;
    draw_healthbar(charStaminaBarTopX-2, charStaminaBarTopY-2, charStaminaBarTopX+(charStaminaBarWidth/2)-4, charStaminaBarTopY+charStaminaBarHeight-2, min( 1,(stamina/(stamina_max/2)) )*100, c_black, staminaColor1, staminaColor1, 0, false, false);
    var secondValue = stamina-(stamina_max/2);
    if (secondValue) draw_healthbar(charStaminaBarTopX+(charStaminaBarWidth/2), charStaminaBarTopY-2, charStaminaBarTopX+charStaminaBarWidth-2, charStaminaBarTopY+charStaminaBarHeight-2, ( secondValue/(stamina_max/2 ))*100, c_black, staminaColor2, staminaColor2, 0, false, false);  
    
    
    //Main Weapon HUD
    var p1WeaponSelectedX = width*0.05;
    var p1WeaponSelectedY = height*0.9;
    var p1WeaponBackX = width*0.03;
    var p1WeaponBackY = height*0.95;
    
    var p1WeaponSelected = noone;
    var p1WeaponBack = noone;
    
    var p1StupidOffsetSelectedY = 0; //because of gloves and buckler. Not called "stupid" lightly
    var p1StupidOffsetBackY = 0;
    var p1StupidOverrideSpriteSelected = -1;
    var p1StupidOverrideSpriteBack = -1;
    
    if (class_player.weapon1) &amp;&amp; (instance_exists(class_player.weapon1))
    {
        if (class_player.weapon1.isActive) 
        {
            p1WeaponSelected = class_player.weapon1;  
            if (class_player.weapon1 == obj_gloves)    { p1StupidOverrideSpriteSelected = spr_gloves_idle;  p1StupidOffsetSelectedY=22; }
            if (class_player.weapon1 == obj_buckler)   { p1StupidOverrideSpriteSelected = spr_buckler_idle; p1StupidOffsetSelectedY=42; }
        }
        else{
            p1WeaponBack = class_player.weapon1;
            if (class_player.weapon1 == obj_gloves)    { p1StupidOverrideSpriteBack = spr_gloves_idle;  p1StupidOffsetBackY=22; }
            if (class_player.weapon1 == obj_buckler)   { p1StupidOverrideSpriteBack = spr_buckler_idle; p1StupidOffsetBackY=42; }
        }
    }
    if (class_player.weapon2) &amp;&amp; (instance_exists(class_player.weapon2))
    {
        if (p1WeaponSelected == noone) &amp;&amp; (class_player.weapon2.isActive)
        {
            p1WeaponSelected = class_player.weapon2;
            if (class_player.weapon2 == obj_gloves)    { p1StupidOverrideSpriteSelected = spr_gloves_idle;  p1StupidOffsetSelectedY=22; }
            if (class_player.weapon2 == obj_buckler)   { p1StupidOverrideSpriteSelected = spr_buckler_idle; p1StupidOffsetSelectedY=42; }
        }
        else{
            p1WeaponBack = class_player.weapon2;
            if (class_player.weapon2 == obj_gloves)    { p1StupidOverrideSpriteBack = spr_gloves_idle;  p1StupidOffsetBackY=22; }
            if (class_player.weapon2 == obj_buckler)   { p1StupidOverrideSpriteBack = spr_buckler_idle; p1StupidOffsetBackY=42; }
        }
    }
    
    var p1WeaponSelectedSprite = -1;
    var p1WeaponSelectedColor = c_black;
    
    if (instance_exists(p1WeaponSelected))
    {
        p1WeaponSelectedSprite = p1WeaponSelected.sprite_index;
        if (p1WeaponSelected.ammo_type == type_light) p1WeaponSelectedColor = K_BETU_GREEN2;
        if (p1WeaponSelected.ammo_type == type_medium) p1WeaponSelectedColor = K_BETU_RED;
        if (p1WeaponSelected.ammo_type == type_heavy) p1WeaponSelectedColor = K_BETU_BLUE;
        
        if (p1StupidOverrideSpriteSelected) p1WeaponSelectedSprite = p1StupidOverrideSpriteSelected;
    }
    
    var p1WeaponBackSprite = -1;
    var p1WeaponBackColor = c_black;
    
    if (instance_exists(p1WeaponBack))
    {
        p1WeaponBackSprite = p1WeaponBack.sprite_index;
        if (p1WeaponBack.ammo_type == type_light) p1WeaponBackColor = K_BETU_GREEN2;
        if (p1WeaponBack.ammo_type == type_medium) p1WeaponBackColor = K_BETU_RED;
        if (p1WeaponBack.ammo_type == type_heavy) p1WeaponBackColor = K_BETU_BLUE;
        
        if (p1StupidOverrideSpriteBack) p1WeaponBackSprite = p1StupidOverrideSpriteBack;
    }
    
    if (sprite_exists(p1WeaponSelectedSprite)) 
    {
        draw_sprite_ext(p1WeaponSelectedSprite, 2, p1WeaponSelectedX+4, p1WeaponSelectedY+p1StupidOffsetSelectedY+4, 2, 2, 0, c_black, 0.8*main_hud_alpha);
        draw_sprite_ext(p1WeaponSelectedSprite, 2, p1WeaponSelectedX, p1WeaponSelectedY+p1StupidOffsetSelectedY, 2, 2, 0, p1WeaponSelectedColor, main_hud_alpha);
    }
    if (sprite_exists(p1WeaponBackSprite)) draw_sprite_ext(p1WeaponBackSprite, 2, p1WeaponBackX, p1WeaponBackY+p1StupidOffsetBackY, 2, 2, 0, p1WeaponBackColor, 0.8*main_hud_alpha);
    
    
    //Ammo Numbers
    
    var p1AmmoNumberGunX = width*0.17;
    var p1AmmoNumberGunY = height*0.9;
    var p1AmmoNumberTotalX = p1AmmoNumberGunX+8;
    var p1AmmoNumberTotalY = p1AmmoNumberGunY+18;
    
    var ammoBarTotalWidth = 40;
    var ammoBarTotalHeight = 16;
    var ammoBarDelaySpeed = 0.004;
    var ammoBarDelayTime = room_speed*0.6;
    var p1AmmoBarTotalX = p1AmmoNumberTotalX+(ammoBarTotalWidth/2);
    var p1AmmoBarTotalY = p1AmmoNumberGunY-8;
    
    if (instance_exists(p1WeaponSelected))
    {
        //Gun Ammo
        draw_set_halign(fa_right);
        draw_set_valign(fa_center);
        draw_set_font(font_wendy50);
        draw_text_dropoutline_ext_transformed(p1AmmoNumberGunX, p1AmmoNumberGunY, string(p1WeaponSelected.ammo_current), c_white, c_white, c_black, 1, 5, 1, 1, 0, main_hud_alpha);
        
        //Total Ammo
        var p1AmmoTotal = 0;
        var p1AmmoTotalMax = 0;
        var p1AmmoBarId = -1;
        if (p1WeaponSelected.ammo_type == type_light)   { p1AmmoTotal = global.ammo_light;    p1AmmoTotalMax = global.ammo_light_max;   p1AmmoBarId =  delayedAmmoLightBar; }
        if (p1WeaponSelected.ammo_type == type_medium)  { p1AmmoTotal = global.ammo_medium;   p1AmmoTotalMax = global.ammo_medium_max;  p1AmmoBarId =  delayedAmmoMediumBar; }
        if (p1WeaponSelected.ammo_type == type_heavy)   { p1AmmoTotal = global.ammo_heavy;    p1AmmoTotalMax = global.ammo_heavy_max;   p1AmmoBarId =  delayedAmmoHeavyBar; }
        draw_set_halign(fa_left);
        draw_set_valign(fa_center);
        draw_set_font(font_wendy15);
        draw_text_dropshadow_ext_transformed(p1AmmoNumberTotalX, p1AmmoNumberTotalY, string(round(p1AmmoTotal/p1WeaponSelected.ammo_cost)), c_white, c_black, 0.8, 2, 1, 1,0, main_hud_alpha);
    
        //Total Ammo Bar
        
        
        draw_healthbar_delayed(p1AmmoBarId, p1AmmoBarTotalX-(ammoBarTotalWidth/2), p1AmmoBarTotalY-(ammoBarTotalHeight/2), p1AmmoBarTotalX+(ammoBarTotalWidth/2), p1AmmoBarTotalY+(ammoBarTotalHeight/2), 
        p1AmmoTotal, p1AmmoTotalMax, p1WeaponSelectedColor, c_black, c_white, ammoBarDelaySpeed, ammoBarDelayTime, 0, false, false);
    }
    
    //Grenades
    var grenadesVerSpacing = 30;
    var grenadesHorSpacing = 25;
    
    var p1GrenadesX = width*0.025;
    var p1GrenadesY = height*0.85;
    
    var grenadeCount = global.grenades;
    var grMaxHorizontal = 5;
    var grDrawCount = 0;
    var grOffsetX = 0;
    var grOffsetY = 0;
    
    repeat (grenadeCount)
    {
        draw_sprite_ext(spr_grenadeNew,0,p1GrenadesX+grOffsetX, p1GrenadesY+grOffsetY, 1, 1, 0, c_white, main_hud_alpha);
        grOffsetX += grenadesHorSpacing;
        grDrawCount++;
        if (grDrawCount &gt;= grMaxHorizontal)
        {
            grOffsetX = 0;
            grOffsetY -= grenadesVerSpacing;
            grDrawCount = 0;
        }
    }
    
    
    //gui_score Objects
    if instance_exists(gui_score)
    {
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        
        var drawScoreX = width*0.5;
        var drawScoreY = height*0.15;
        
        draw_set_font(font_wendy30);
        draw_text_dropoutline_ext_transformed(drawScoreX,drawScoreY,gui_score.myString,c_white,c_white,c_black,0.7,4,1,1,0,main_hud_alpha);
        
        draw_set_font(font_wendy50);
        draw_text_dropoutline_ext_transformed(drawScoreX,drawScoreY+43,'+'+string(gui_score.value),c_white,c_white,c_black,0.7,4,gui_score.size_current,gui_score.size_current,0,main_hud_alpha);
    }
    
    //fx_bigMessage Objects  
    if instance_exists(fx_bigMessage)
    {
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        var drawBigX = width*0.5;
        var drawBigY = height*0.62;
    
        for (var big=0; big&lt;instance_number(fx_bigMessage); big++)
        {
            var bigMessage = instance_find(fx_bigMessage,big);
            if (bigMessage.active)
            {
                draw_set_font(bigMessage.textBigFont);
                draw_text_dropoutline_ext_transformed(drawBigX,drawBigY,bigMessage.textBig,bigMessage.textBigColor,bigMessage.textBigColor,c_black,0.7,4,1,1,0, bigMessage.myAlpha);
                
                draw_set_font(bigMessage.textSmallFont);
                draw_text_dropoutline_ext_transformed(drawBigX,drawBigY+43,bigMessage.textSmall,bigMessage.textSmallColor,bigMessage.textSmallColor,c_black,0.7,4,1,1,0, bigMessage.myAlpha);
            
                if (bigMessage.relicCompleteSprite != -1) draw_sprite_ext(bigMessage.relicCompleteSprite,0,drawBigX,drawBigY-43,2,2,0,c_white,bigMessage.myAlpha);
                else if (bigMessage.hunterUnlockSprite != -1) draw_sprite_ext(bigMessage.hunterUnlockSprite,0,drawBigX,drawBigY-50,1,1,0,c_white,bigMessage.myAlpha);
                else if (bigMessage.relicSprite1 != -1)
                {
                    var relicBlend;
                    if (bigMessage.relicSprite1Draw) relicBlend = c_white;  else relicBlend = c_black;
                    draw_sprite_ext(bigMessage.relicSprite1,0,drawBigX-70,drawBigY-43,2,2,0,relicBlend,bigMessage.myAlpha);
                    if (bigMessage.relicSprite2Draw) relicBlend = c_white;  else relicBlend = c_black;
                    draw_sprite_ext(bigMessage.relicSprite2,0,drawBigX,drawBigY-43,2,2,0,relicBlend,bigMessage.myAlpha);
                    if (bigMessage.relicSprite3Draw) relicBlend = c_white;  else relicBlend = c_black;
                    draw_sprite_ext(bigMessage.relicSprite3,0,drawBigX+70,drawBigY-43,2,2,0,relicBlend,bigMessage.myAlpha);
                }
            }
        }
    }
    
    //Draw Dynamic Ammo Bars
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_alpha(main_hud_alpha);
    
    var dynamicAmmoX = -1*width*0.1;
    var dynamicAmmoY1 = height*0.46;
    var dynamicAmmoY2 = height*0.5;
    var dynamicAmmoY3 = height*0.54;
    var dynamicAmmoBarHeight = 32;
    var dynamicAmmoBarWidth = 160;
        
    var dynamicAmmoString1 = "LIGHT AMMO";
    var dynamicAmmoString2 = "MEDIUM AMMO";
    var dynamicAmmoString3 = "HEAVY AMMO";
        
    if (instance_exists(gui_dynamic_ammo1))
    {
        var bgX1 = dynamicAmmoX-(dynamicAmmoBarWidth/2) +gui_dynamic_ammo1.offsetX;
        var bgX2 = dynamicAmmoX+(dynamicAmmoBarWidth/2) +gui_dynamic_ammo1.offsetX;
        
        var bg1Y1 = dynamicAmmoY1-(dynamicAmmoBarHeight/2) +gui_dynamic_ammo1.offsetY;
        var bg1Y2 = dynamicAmmoY1+(dynamicAmmoBarHeight/2) +gui_dynamic_ammo1.offsetY;
        var bg2Y1 = dynamicAmmoY2-(dynamicAmmoBarHeight/2) +gui_dynamic_ammo1.offsetY;
        var bg2Y2 = dynamicAmmoY2+(dynamicAmmoBarHeight/2) +gui_dynamic_ammo1.offsetY;
        var bg3Y1 = dynamicAmmoY3-(dynamicAmmoBarHeight/2) +gui_dynamic_ammo1.offsetY;
        var bg3Y2 = dynamicAmmoY3+(dynamicAmmoBarHeight/2) +gui_dynamic_ammo1.offsetY;
        
        draw_set_color(c_black);
        draw_set_alpha(0.8*main_hud_alpha);
        draw_rectangle(bgX1,bg1Y1,bgX2,bg1Y2,false);
        draw_rectangle(bgX1,bg2Y1,bgX2,bg2Y2,false);
        draw_rectangle(bgX1,bg3Y1,bgX2,bg3Y2,false);
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_set_alpha(main_hud_alpha);
        var ammoBarLightColor = make_color_rgb(0,178,77);
        var ammoBarMediumColor = make_color_rgb(178,0,65);
        var ammoBarHeavyColor = make_color_rgb(0,88,178);
        
        var ammoBarDelaySpeed = 0.004;
        var ammoBarDelayTime = room_speed*0.6;
        
        draw_healthbar_delayed(delayedAmmoLightBar, bgX1-2,bg1Y1-2,bgX2-2,bg1Y2-2, global.ammo_light, global.ammo_light_max, ammoBarLightColor, c_black, c_white, ammoBarDelaySpeed, ammoBarDelayTime, 0, false, false);
        draw_healthbar_delayed(delayedAmmoMediumBar, bgX1-2,bg2Y1-2,bgX2-2,bg2Y2-2, global.ammo_medium, global.ammo_medium_max, ammoBarMediumColor, c_black, c_white, ammoBarDelaySpeed, ammoBarDelayTime, 0, false, false);
        draw_healthbar_delayed(delayedAmmoHeavyBar, bgX1-2,bg3Y1-2,bgX2-2,bg3Y2-2, global.ammo_heavy, global.ammo_heavy_max, ammoBarHeavyColor, c_black, c_white, ammoBarDelaySpeed, ammoBarDelayTime, 0, false, false);
    
        draw_set_font(font_wendy12);
        draw_set_halign(fa_left);
        
        draw_text_dropshadow_ext_transformed(bgX1+3,dynamicAmmoY1+gui_dynamic_ammo1.offsetY,dynamicAmmoString1,c_white,c_black,0.7,1,1,1,0,main_hud_alpha);
        draw_text_dropshadow_ext_transformed(bgX1+3,dynamicAmmoY2+gui_dynamic_ammo1.offsetY,dynamicAmmoString2,c_white,c_black,0.7,1,1,1,0,main_hud_alpha);
        draw_text_dropshadow_ext_transformed(bgX1+3,dynamicAmmoY3+gui_dynamic_ammo1.offsetY,dynamicAmmoString3,c_white,c_black,0.7,1,1,1,0,main_hud_alpha);
    }
    
    //Boss Fight Lifebar
    if instance_exists(obj_boss)
    {
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        
        var drawBossX1 = width*0.3;
        var drawBossY1 = height*0.9;
        var drawBossX2 = width*0.7;
        var drawBossY2 = height*0.95;
        
        var drawBossColorMain = c_red;
        var drawBossColorDelay = c_white;
        var drawBossColorBack = c_black;
        var drawBossColorGenerator = c_blue;
        
        var drawBossDelayTime = room_speed*0.6;
        var drawBossDelaySpeed = 0.0025;
        
        var allowBossDraw = true;
        var drawBossText = 'DUCAN COMMANDER';
        
        //Draw Generator1 Healthbar
        if (obj_boss.hpMilestoneCurrent == 1) &amp;&amp; (instance_exists(obj_generator1))
        {
            allowBossDraw = false;
            
            if (isGen1Setup) draw_healthbar_delayed(bossBar,drawBossX1, drawBossY1, drawBossX2, drawBossY2, obj_generator1.hp, obj_generator1.maxhp, drawBossColorGenerator, drawBossColorBack, drawBossColorDelay, drawBossDelaySpeed, drawBossDelayTime,0,true,false);
            else{
                draw_healthbar(drawBossX1, drawBossY1, drawBossX2, drawBossY2,fakeBarFill,drawBossColorBack,drawBossColorGenerator,drawBossColorGenerator,0,true,false);
                if (fakeBarFill &lt; 100) fakeBarFill++;
                else { isGen1Setup = true; fakeBarFill=0; }
            }
        }
        
        //Draw Generator2 Healthbar
        if (obj_boss.hpMilestoneCurrent == 2) &amp;&amp; (instance_exists(obj_generator2))
        {
            allowBossDraw = false;
            
            if (isGen1Setup) draw_healthbar_delayed(bossBar,drawBossX1, drawBossY1, drawBossX2, drawBossY2, obj_generator2.hp, obj_generator2.maxhp, drawBossColorGenerator, drawBossColorBack, drawBossColorDelay, drawBossDelaySpeed, drawBossDelayTime,0,true,false);
            else{
                draw_healthbar(drawBossX1, drawBossY1, drawBossX2, drawBossY2,fakeBarFill,drawBossColorBack,drawBossColorGenerator,drawBossColorGenerator,0,true,false);
                if (fakeBarFill &lt; 100) fakeBarFill++;
                else { isGen1Setup = true; fakeBarFill=0; }
            }
        }
        
        //Draw Generator3 Healthbar
        if (obj_boss.hpMilestoneCurrent == 4) &amp;&amp; (instance_exists(obj_generator3))
        {
            allowBossDraw = false;
            
            if (isGen1Setup) draw_healthbar_delayed(bossBar,drawBossX1, drawBossY1, drawBossX2, drawBossY2, obj_generator3.hp, obj_generator3.maxhp, drawBossColorGenerator, drawBossColorBack, drawBossColorDelay, drawBossDelaySpeed, drawBossDelayTime,0,true,false);
            else{
                draw_healthbar(drawBossX1, drawBossY1, drawBossX2, drawBossY2,fakeBarFill,drawBossColorBack,drawBossColorGenerator,drawBossColorGenerator,0,true,false);
                if (fakeBarFill &lt; 100) fakeBarFill++;
                else { isGen1Setup = true; fakeBarFill=0; }
            }
        }
        
        //Draw Boss Healthbar
        if (allowBossDraw)
        {
            if (isBossSetup) draw_healthbar_delayed(bossBar,drawBossX1, drawBossY1, drawBossX2, drawBossY2, obj_boss.hp, obj_boss.hp_max, drawBossColorMain, drawBossColorBack, drawBossColorDelay, drawBossDelaySpeed, drawBossDelayTime,0,true,false);
            else{
                draw_healthbar(drawBossX1, drawBossY1, drawBossX2, drawBossY2,fakeBarFill,drawBossColorBack,drawBossColorMain,drawBossColorMain,0,true,false);
                if (fakeBarFill &lt; 100) fakeBarFill++;
                else { isBossSetup = true; fakeBarFill=0; }
            }
        }
        else drawBossText = 'SHIELD GENERATOR';
        
        draw_set_font(font_menu18);
        draw_set_color(c_white);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        
        draw_text( drawBossX1+((drawBossX2-drawBossX1)/2), drawBossY1+((drawBossY2-drawBossY1)/2), drawBossText);
    }
}

//Dynamic Bounty
draw_set_halign(fa_right);
draw_set_valign(fa_center);
draw_set_font(font_wendy30);
draw_set_color(c_white);
if (!global.pauseMenu) draw_set_alpha(main_hud_alpha);
else draw_set_alpha(1);

var dynamicBountyX = width*0.5;
var dynamicBountyY = -1*height*0.1;
    
if (instance_exists(gui_dynamic_bounty))
{
    draw_sprite(gui_dynamic_bounty.sprite_index,gui_dynamic_bounty.image_index, dynamicBountyX+gui_dynamic_bounty.offsetX, dynamicBountyY+gui_dynamic_bounty.offsetY);
    draw_text(dynamicBountyX+gui_dynamic_bounty.offsetX+103, dynamicBountyY+gui_dynamic_bounty.offsetY+2, string(global.score_total));
}

//Dynamic Relics
var dynamicRelicX1 = width*0.35;
var dynamicRelicX2 = width*0.5;
var dynamicRelicX3 = width*0.65;
var dynamicRelicY = height*1.1;

var offsetRelicSpriteX = -87;
var offsetRelicSpriteY = 2;
var offsetRelicStringX = 36;
var offsetRelicStringY = -8;
 
draw_set_alpha(main_hud_alpha);
draw_set_color(c_white);
draw_set_font(font_wendy15);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
var relicTextSep = 30;
var relicTextWidth = 100;

if (instance_exists(gui_dynamic_relic1)) 
{
    if (sprite_exists(gui_dynamic_relic1.sprite_index)) draw_sprite(gui_dynamic_relic1.sprite_index,gui_dynamic_relic1.image_index, dynamicRelicX1+gui_dynamic_relic1.offsetX, dynamicRelicY+gui_dynamic_relic1.offsetY); 
    if (sprite_exists(gui_dynamic_relic1.mySprite)) draw_sprite_ext(gui_dynamic_relic1.mySprite,0, (dynamicRelicX1 +gui_dynamic_relic1.offsetX +offsetRelicSpriteX), (dynamicRelicY +gui_dynamic_relic1.offsetY +offsetRelicSpriteY),1.5,1.5,0,c_white,main_hud_alpha); 
    draw_text_ext((dynamicRelicX1 +gui_dynamic_relic1.offsetX +offsetRelicStringX), (dynamicRelicY +gui_dynamic_relic1.offsetY +offsetRelicStringY), gui_dynamic_relic1.myString, relicTextSep, relicTextWidth );
}

if (instance_exists(gui_dynamic_relic2))
{
    if (sprite_exists(gui_dynamic_relic2.sprite_index)) draw_sprite(gui_dynamic_relic2.sprite_index,gui_dynamic_relic2.image_index, dynamicRelicX2+gui_dynamic_relic2.offsetX, dynamicRelicY+gui_dynamic_relic2.offsetY);
    if (sprite_exists(gui_dynamic_relic2.mySprite)) draw_sprite_ext(gui_dynamic_relic2.mySprite,0, (dynamicRelicX2 +gui_dynamic_relic2.offsetX +offsetRelicSpriteX), (dynamicRelicY +gui_dynamic_relic2.offsetY +offsetRelicSpriteY),1.5,1.5,0,c_white,main_hud_alpha);
    draw_text_ext((dynamicRelicX2 +gui_dynamic_relic2.offsetX +offsetRelicStringX), (dynamicRelicY +gui_dynamic_relic2.offsetY +offsetRelicStringY), gui_dynamic_relic2.myString, relicTextSep, relicTextWidth );
}

if (instance_exists(gui_dynamic_relic3)) 
{
    if (sprite_exists(gui_dynamic_relic3.sprite_index))  draw_sprite(gui_dynamic_relic3.sprite_index,gui_dynamic_relic3.image_index, dynamicRelicX3+gui_dynamic_relic3.offsetX, dynamicRelicY+gui_dynamic_relic3.offsetY);
    if (sprite_exists(gui_dynamic_relic3.mySprite)) draw_sprite_ext(gui_dynamic_relic3.mySprite,0, (dynamicRelicX3 +gui_dynamic_relic3.offsetX +offsetRelicSpriteX), (dynamicRelicY +gui_dynamic_relic3.offsetY +offsetRelicSpriteY),1.5,1.5,0,c_white,main_hud_alpha); 
    draw_text_ext((dynamicRelicX3 +gui_dynamic_relic3.offsetX +offsetRelicStringX), (dynamicRelicY +gui_dynamic_relic3.offsetY +offsetRelicStringY), gui_dynamic_relic3.myString, relicTextSep, relicTextWidth );
}

///Draw Game Over
if (global.gameOver)
{
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_font(font_wendy50);
    var gameOverMagenta = make_colour_rgb(204,10,68);
            
    var gameOverX = width*0.5;
    var gameOverY = height*0.42;
    draw_text_dropoutline_ext_transformed(gameOverX,gameOverY,'GAME OVER',gameOverMagenta,gameOverMagenta,c_black,0.6,4,1,1,0,1);
            
    draw_set_font(font_wendy15);
    gameOverY2 = height*0.5;
    gameOverY3 = height*0.55;
            
    var gameOverString1, gameOverString2
            
    if (global.input == 'keyboard') 
    {
        gameOverString1 = 'Press Space to Retry';
        gameOverString2 = 'Press ESC to return to Menu';
    }
            
    if (global.input == 'joystick') 
    {
        gameOverString1 = 'Press A to Retry';
        gameOverString2 = 'Press B return to Menu';
    }
            
    draw_text_dropoutline_ext_transformed(gameOverX,gameOverY2,gameOverString1,c_white,c_white,c_black,0.6,4,1,1,0,1);
    draw_text_dropoutline_ext_transformed(gameOverX,gameOverY3,gameOverString2,c_white,c_white,c_black,0.6,4,1,1,0,1);
}

draw_set_alpha(1);
surface_reset_target();
var surfaceXScale = window_get_width()/1920;
var surfaceYScale = window_get_height()/1080;
if (surface_exists(guiSurface)) draw_surface_ext(guiSurface, 0, 0, surfaceXScale, surfaceYScale, 0, c_white, 1);







</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fullscreen Effects


//Red Flash On Damage
if instance_exists(class_player)
{
    if (class_player.hit_taken) &amp;&amp; (!class_player.shield)
    {
        draw_set_alpha(0.3);
        draw_rectangle_colour(0,0,window_get_width(),window_get_height(),c_red,c_red,c_red,c_red,false);
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FPS and Autoaim
draw_set_halign(fa_right);
draw_set_valign(fa_center);
draw_set_color(c_white);
draw_set_font(font_wendy12);

//Draw FPS if it is low!
if ((fps/room_speed) &lt; 0.9) draw_text(window_get_width()*0.99, window_get_height()*0.95, "FPS " + string(fps) + '/' + string(room_speed) );

//Version Number
draw_text(window_get_width()*0.99, window_get_height()*0.97, global.currentVersionNumber );


if (global.input = 'joystick')
{
    var stringAim;
    if (global.auto_aim == K_AUTOAIM_OFF) stringAim = 'OFF';
    if (global.auto_aim == K_AUTOAIM_ASSIST) stringAim = 'ASSIST';
    if (global.auto_aim == K_AUTOAIM_FULL) stringAim ='FULL';
    
    draw_text(window_get_width()*0.93, window_get_height()*0.94,'AIM: '+stringAim );
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cutscene Bars Draw

if (!global.cutscene)
{
    cutscene_bars_position -= cutscene_bars_exit_speed;
}
else if (cutscene_bars_position &lt; cutscene_bars_positionStart)
{
    cutscene_bars_position += min(cutscene_bars_exit_speed, (cutscene_bars_positionStart-cutscene_bars_position));
}

if (cutscene_bars_position &gt; 0) &amp;&amp; (!global.pauseMenu)
{
    draw_set_colour(c_black);
    draw_rectangle(0,0,window_get_width(),window_get_height()*cutscene_bars_position,false);
    draw_rectangle(0,window_get_height()*(1-cutscene_bars_position),window_get_width(),window_get_height(),false);
    
    if (main_hud_alpha &gt; 0) main_hud_alpha-=0.15;
    else main_hud_alpha = 0;
}
else
{
    cutscene_bars_position = 0;
    
    if (main_hud_alpha &lt; 1) main_hud_alpha+=0.15;
    else main_hud_alpha = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug for Pathfinding

if (global.drawGridDebug)
{
    //show_debug_message('Trying to draw the grid!');
    draw_set_alpha(0.5);
    mp_grid_draw(global.astar_grid);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crosshair

if (!global.pauseMenu) &amp;&amp; (!global.gameOver)
{
    var drawCrosshair = true;
    
    if collision_circle(global.crosshairX,global.crosshairY,5,class_enemy,false,true) crosshair_image = 1;
    else crosshair_image = 0;
    
    if instance_exists(class_player)
    {
        if instance_exists(class_player.myGun)
        {
            if (class_player.myGun.reloading)
            {
                drawCrosshair = false;
                var subImage = (class_player.myGun.reload_time_current/class_player.myGun.reload_time)*12; //12=animation frames
                
                if (global.input == 'keyboard')
                { 
                    draw_sprite_ext(spr_crosshair,3,global.crosshairX,global.crosshairY,global.crosshair_scale,global.crosshair_scale,0,c_white,1);
                    draw_sprite_ext(spr_crosshair_reload,subImage,global.crosshairX,global.crosshairY,1.6,1.6,0,c_white,1);
                } 
            }
        }
        
        if (global.input == 'joystick')
        {
            if (class_player.aiming) drawCrosshair = false;
            if (!class_player.joyIsRightStickAiming) drawCrosshair = false;
        }
    }
    
    if (drawCrosshair) draw_sprite_ext(spr_crosshair,crosshair_image,global.crosshairX,global.crosshairY,global.crosshair_scale,global.crosshair_scale,0,c_white,1);
    
    if global.crosshair_scale &gt; 1
    {
        global.crosshair_scale -= 0.05;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
